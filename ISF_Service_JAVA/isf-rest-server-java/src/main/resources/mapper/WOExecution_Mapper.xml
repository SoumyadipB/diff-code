<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ericsson.isf.mapper.WOExecutionMapper">

	<cache type="org.mybatis.caches.ehcache.EhcacheCache" />
	<resultMap type='SearchPlannedWOProjectModel'
		id='SearchPlannedWOProjectModelResult'>
		<result property='projectID' column='ProjectID' />
		<result property='projectName' column='ProjectName' />
		<collection property='listOfDetails'
			ofType='SearchPlannedWODetailsModel'>
			<result property='woID' column='WOID' />
			<result property='woName' column='WOName' />
			<result property='woPlanId' column='woPlanId' />
			<result property='priority' column='Priority' />
			<result property='signumID' column='SignumID' />
			<result property='status' column='Status' />
			<result property='plannedStartDate' column='PlannedStartDate' />
			<result property='plannedStartTime' column='StartTime' />
			<result property='plannedEndDate' column='PlannedEndDate' />
			<result property='subActivityID' column='SubActivityID' />
			<result property='loe' column='LOE' />
			<result property='activity' column='Activity' />
			<result property='subActivity' column='SubActivity' />
			<collection property='listOfTaskDetails'
				ofType='SearchPlannedWOForTasksModel'>
				<result property='fcStepDetailsID' column='FcStepDetailsID' />
				<result property='subActivityFlowChartDefID'
					column='SubActivityFlowChartDefID' />
				<result property='stepID' column='StepID' />
				<result property='stepName' column='StepName' />
				<result property='taskID' column='TaskID' />
				<result property='task' column='Task' />
				<result property='executionType' column='ExecutionType' />
				<result property='avgEstdEffort' column='AvgEstdEffort' />
				<result property='toolID' column='ToolID' />
				<result property='active' column='Active' />
				<result property='versionNO' column='WorkFlowVersion' />
			</collection>
			<collection property='listOfNode'
				ofType='WorkOrderNodesModel'>
				<result property="wOID" column="WOID" />
				<result property='nodeType' column='NodeType' />
				<result property='nodeNames' column='NodeNames' />
			</collection>
		</collection>
	</resultMap>




	<resultMap
		type='com.ericsson.isf.model.WorkOrderBasicDetailsModel'
		id='WorkOrderBasicDetailsModelResult'>
		<result property='doid' column='DOID' />
		<result property='deliverableUnitName'
			column='DeliverableUnitName' />
		<result property='deliverableName' column='DeliverableName' />
        <result property='proficiencyID' column='ProficiencyID' />
		<result property='woId' column='woId' />
		<result property= 'srID' column= 'srID' />
		<result property='woName' column='woName' />
		<result property='priority' column='priority' />
		<result property='priorityModifiedOn'
			column='priorityModifiedOn' />
		<result property='status' column='status' />
		<result property='loe' column='loe' />
		<result property='activity' column='activity' />
		<result property='subActivity' column='subActivity' />
		<result property='subActivityId' column='subActivityId' />
		<result property='projectId' column='projectId' />
		<result property='projectName' column='projectName' />
		<result property='workFlowName' column='workFlowName' />
		<result property='employeeName' column='employeeName' />
		<result property='woPlanId' column='woPlanId' />
		<result property='versionNumber' column='versionNumber' />
		<result property='startDate' column='startDate' />
		<result property='endDate' column='endDate' />
		<result property='slaHours' column='slaHours' />
		<result property='technology' column='Technology' />
		<result property='signum' column='signum' />
		<result property='workOrderAutoSenseEnabled' column='IsAutoSenseEnable' />
		<result property='defID' column='flowchartdefid' />
		<result property='type' column='Type' />
		<collection property='listOfNode'
			ofType='WorkOrderNodesModel'>
			<result property="wOID" column="WOID" />
			<result property='nodeType' column='NodeType' />
			<result property='nodeNames' column='NodeNames' />
			<result property='market' column='Market' />
		</collection>
	</resultMap>
	
	<!-- new resultMap for ProjectQueue -->
		<resultMap
		type='com.ericsson.isf.model.ProjectQueueWorkOrderBasicDetailsModel'
		id='ProjectQueueWorkOrderBasicDetailsModelResult'>
		<result property='doid' column='DOID' />
<!-- 		<result property='deliverableUnitName'
			column='DeliverableUnitName' /> -->
		<result property='deliverableName' column='DeliverableName' />
        <!-- <result property='proficiencyID' column='ProficiencyID' /> -->
		<result property='woId' column='woId' />
		<result property= 'srID' column= 'srID' />
		<result property='woName' column='woName' />
		<result property='priority' column='priority' />
		<result property='priorityModifiedOn'
			column='priorityModifiedOn' />
<!-- 		<result property='status' column='status' />
		<result property='loe' column='loe' />
		<result property='activity' column='activity' /> -->
		<result property='subActivity' column='subActivity' />
		<!-- <result property='subActivityId' column='subActivityId' /> -->
		<result property='projectId' column='projectId' />
		<result property='projectName' column='projectName' />
		<result property='workFlowName' column='workFlowName' />
		<result property='employeeName' column='employeename' />
		<result property='woPlanId' column='WOPLANID' /> 
		<!-- <result property='versionNumber' column='versionNumber' /> -->
		<result property='startDate' column='startDate' />
		<result property='endDate' column='endDate' />
		<!-- <result property='slaHours' column='slaHours' /> -->
		<result property='technology' column='Technology' />
		<result property='signum' column='signum' />
		<!-- <result property='market' column='market' /> -->
		<result property='recordsTotal' column='recordsTotal' />
		<result property='workOrderAutoSenseEnabled' column='IsAutoSenseEnable' />
		<result property='defID' column='flowchartdefid' />
<!-- 		<result property='type' column='Type' /> -->
		<collection property='listOfNode'
			ofType='com.ericsson.isf.model.WorkOrderNodesModel'>
			<result property="wOID" column="WOID" />
			<result property='nodeType' column='nodetype' />
			<result property='nodeNames' column='nodenames' />
			<result property='market' column='market' />
		</collection> 
	</resultMap>
	
	
	<resultMap
		type='com.ericsson.isf.model.WorkOrderDetailsSearchModel'
		id='WorkOrderDetailsSearchModelResult'>
						<result property='doid' column='DOID' />
				<result property='deliverableUnitName'
					column='DeliverableUnitName' />
				<result property='deliverableName' column='DeliverableName' />
		        <result property='proficiencyID' column='ProficiencyID' />
				<result property='woId' column='woId' />
				<result property= 'srID' column= 'srID' />
				<result property='woName' column='woName' />
				<result property='priority' column='priority' />
				<result property='priorityModifiedOn'
					column='priorityModifiedOn' />
				<result property='status' column='status' />
				<result property='loe' column='loe' />
				<result property='activity' column='activity' />
				<result property='subActivity' column='subActivity' />
				<result property='subActivityId' column='subActivityId' />
				<result property='projectId' column='projectId' />
				<result property='projectName' column='projectName' />
				<result property='workFlowName' column='workFlowName' />
				<result property='employeeName' column='employeeName' />
				<result property='woPlanId' column='woPlanId' />
				<result property='versionNumber' column='versionNumber' />
				<result property='startDate' column='startDate' />
				<result property='endDate' column='endDate' />
				<result property='slaHours' column='slaHours' />
				<result property='technology' column='Technology' />
				<result property='signum' column='signum' />
				<result property='workOrderAutoSenseEnabled' column='IsAutoSenseEnable' />
				<result property='defID' column='flowchartdefid' />
				<result property='totalCounts' column='totalCounts' />
				<result property='type' column='Type' />
				<result property='nodeType' column='NodeType' />
				<result property='nodeNames' column='NodeNames' />
				<result property='market' column='Market' />
	</resultMap>
	
	<resultMap
		type='com.ericsson.isf.model.WorkOrderNodesModel'
		id='WorkOrderNodesModelResult'>
					<result property="wOID" column="WOID" />
					<result property='nodeType' column='NodeType' />
					<result property='nodeNames' column='NodeNames' />
					<result property='market' column='Market' />
	</resultMap>
	
	
	<resultMap type='AdhocWorkOrderModel'
		id='AdhocWorkOrderModelResult'>
		<id property='adhocWOID' column='AdhocWOID' />
		<result property='woName' column='WoName' />
		<result property='projectID' column='ProjectID' />
		<result property='domainID' column='DomainID' />
		<result property='serviceAreaID' column='ServiceAreaID' />
		<result property='technologyID' column='TechnologyID' />
		<result property='subActivityID' column='SubActivityID' />
		<result property='startDate' column='StartDate' />
		<result property='startTime' column='StartTime' />
		<result property='avgEstdEffort' column='AvgEstdEffort' />
		<result property='priority' column='Priority' />
		<result property='assignedTO' column='AssignedTO' />
		<result property='createdBy' column='CreatedBy' />
		<result property='createdDate' column='CreatedDate' />
		<result property='active' column='Active' />
	</resultMap>

	<resultMap type='ChildStepDetailsModel'
		id='ChildStepDetailsModelResult'>
		<result property='stepID' column='stepID' />
		<result property='stepName' column='stepName' />
		<result property='taskID' column='taskID' />
		<result property='labelName' column='labelName' />
		<result property='executionType' column='executionType' />
		<result property='stepType' column='stepType' />
		<result property='isRunOnServer' column='isRunOnServer' />
		<result property='isInputRequired' column='isInputRequired' />
		<result property='taskActionName' column='taskActionName' />
		<result property='botType' column='botType' />
		<result property='stepRpaId' column='StepRpaId' />
		<result property='bookingID' column='bookingID' />
		<result property='startRule' column='startRule' />
		<result property='stopRule' column='stopRule' />
		<result property='outputUpload' column='outputUpload' />
		<result property='bookingStatus' column='bookingStatus' />
		<association property="proficiencyType" javaType='ProficiencyTypeModal'>
			<id property='proficiencyID' column='ProficiencyID'/>
			<result property='proficiencyName' column='ProficiencyName' />
			<result property='proficiencyLevel' column='ProficiencyLevel' />
		</association>
	</resultMap>
	
	<resultMap type="FlowChartReverseTraversalModel" id="FlowChartReverseTraversalResult">
		<id property='stepID' column='StepID'/>
		<result property='stepProficiencyID' column='ProficiencyID'/>
		<result property='status' column='Status' />
		<result property='executionType' column='ExecutionType' />
		<collection property='parentsStepID' javaType='List' ofType='String'>
			<id column='FlowchartSourceID'/>
		</collection>
	</resultMap>
	
		<select id='searchPlannedWorkOrders'
				resultMap='WorkOrderDetailsSearchModelResult'>
				
				declare @DefProdID TINYINT ,@KPIID TINYINT,@ExpProfID TINYINT, @Signumid varchar(10)
				Drop  table  IF Exists  #tbl_work_flow_user_proficiency 
				
				select * into #tbl_work_flow_user_proficiency
				from (SELECT *,
				ROW_NUMBER() OVER(PARTITION BY PROJECTID,WFID,SUBACTIVITYID,signumid ORDER BY LastModifiedOn DESC)RN
				FROM TRANSACTIONALDATA.TBL_WORK_FLOW_USER_PROFICIENCY
				WHERE  
				signumid IN (${signum})) tbl where rn=1
				
				Select @DefProdID = ProficiencyID from refData.tbl_WF_Proficiency_Type
				where ProficiencyName = 'Assessed'
				;
				select @KPIID = KpiID from REFDATA.TBL_WF_PROFICIENCY_KPI where KpiName = 'Qualify Count'
				and IsActive=1
				; 
				Select @ExpProfID = ProficiencyID from refData.tbl_WF_Proficiency_Type
			    where ProficiencyName = 'Experienced' and IsActive = 1  
				;
				
		        
				 Drop table if exists #tempdata
		       <!--   select @ProficiencyID = ProficiencyID from refdata.tbl_wf_proficiency_type
		        where ProficiencyName = 'Assessed' -->
				
				select Distinct wp.projectid,wo.WOID, wo.WOName, wo.Priority,wo.Status
		        ,s.Activity,s.SubActivity,s.subActivityId,def.Type,
		        
		    
				<!--  CASE WHEN
				wo.proficiencyID  is NULL THEN isNULL(PP.DisplayedMode , @ProficiencyID)   
				ELSE
				wo.ProficiencyID    END
				as ProficiencyID , -->
			    
			    	
				CASE WHEN wo.ProficiencyID IS NOT NULL then wo.ProficiencyID
				WHEN WFProf.DisplayedMode &lt;&gt; @DefProdID  then WFProf.DisplayedMode
				WHEN ((WFProf.DisplayedMode is null) or (WFProf.DisplayedMode =@DefProdID )) 
				and  KV.KPIValue = 0
				then @ExpProfID ELSE @DefProdID END as ProficiencyID ,
			    
			    case when nodes.NodeType is
		        null or len(nodes.NodeType) &lt; 2 then
		        ISNULL(ne.ElementType,'') else
		        ISNULL(nodes.NodeType,'') end NodeType,
		        wo.woPlanId
		        ,ISNULL(nodes.NodeNames,'') as NodeNames,wo.actualstartdate startdate,wo.actualenddate
		        endDate,def.versionNumber
		        ,wo.DOID,ISNULL(ne.Market,'') as Market 
		       into #tempdata
		        from
		        transactionalData.TBL_WORK_ORDER wo
		        inner join
		        transactionalData.TBL_WORK_ORDER_PLAN wp on
		        wp.WOPlanID=wo.WOPlanID
		        left join transactionalData.TBL_WORK_ORDER_NODES as nodes on
		        nodes.WOID =
		        wo.WOID
		        left join transactionalData.TBL_NETWORK_ELEMENT ne
		        on
		        ne.networkelementid=nodes.networkelementid
		        inner join
		        refData.TBL_SUBACTIVITY s on wo.SubActivityID = s.SubActivityID
		        inner
		        join transactionalData.TBL_SUBACTIVITY_FLOWCHART_DEF def on
		        def.ProjectID = wp.ProjectID
		        and def.SubActivityID = wo.SubActivityID
		        and
		        wo.WorkFlowVersion=def.versionnumber
		        and def.SubActivityFlowChartDefID=wo.flowchartdefid
		        inner join
		        transactionalData.TBL_PROJECTS proj on wp.ProjectID=proj.ProjectID
		        
		       <!--   left join 
				#tbl_work_flow_user_proficiency PP on 
				PP.ProjectID  = wo.ProjectID and PP.signumID = wo.signumID and PP.wfID = def.wfID -->
				
				 LEFT join #tbl_work_flow_user_proficiency  WFProf
				   ON WO.ProjectID = WFProf.ProjectID 
				   AND WO.signumID = WFProf.SignumID
				   And def.WFID =  WFProf.WFID
				   AND wo.SubActivityID = WFProf.SubActivityID
				   Left Join transactionaldata.TBL_SubactivityFlowChart_Kpi_Value KV
				   On KV.ProjectID = wo.PROJECTID
				   and KV.SubActivityFlowChartDefID = wo.flowchartdefid
				   and KV.SubactivityID = wo.SubActivityID
				   and KV.IsActive =  1
				   and KV.KpiID = @KPIID
				
				
		        
		        where wp.active=1 and wo.active=1
		
		        <if test='signum != null'>
		            and wo.SignumID in (${signum})
		            and proj.Status != 'Closed'
		        </if>
		        <if test='startDate != null and endDate != null'>
		            and
		            (
		            (wo.status in ('CLOSED','COMPLETED','REJECTED') and
		            CONVERT(DATE,
		            wo.ActualEndDate) between
		            #{startDate} and #{endDate})
		
		            or
		            (
		            wo.status in ('DEFERRED') and CONVERT(DATE, wo.LastModifiedDate)
		            between
		            #{startDate} and #{endDate}
		            )
		            )
		        </if>
		        
Select
projectid,    
WOID,  
WOName,       
Priority,     
Status,
Activity,
SubActivity,  
subActivityId,       
Type,  
ProficiencyID,       
NodeType = STUFF((SELECT ', ' + NodeType
           FROM #tempdata b 
           WHERE b.woid = a.woid 
          FOR XML PATH('')), 1, 2, ''),  
woPlanId,  
NodeNames = STUFF((SELECT ', ' + NodeNames
           FROM #tempdata b 
           WHERE b.woid = a.woid 
          FOR XML PATH('')), 1, 2, ''),
startdate,    
endDate,      
versionNumber,       
DOID,     
Market = STUFF((SELECT ', ' + Market
           FROM #tempdata b 
           WHERE b.woid = a.woid 
          FOR XML PATH('')), 1, 2, ''),
Count(*) OVER() totalcounts 
FROM #tempdata a

where 1=1

<if test="dataTableRequest != null">
  <foreach item="column" index="index" collection="dataTableRequest.columns">
		            <if test ="column.search != ''">
		                 <choose>
		                      <when test="column.data == 'projectId' ">
		                         and  (projectid like #{column.search})
		                      </when> 
		                      <when test="column.data=='nodeNames'">
		                             and (NodeNames like #{column.search})
		                      </when>
		                      <when test="column.data=='doid'">
		                              AND DOID LIKE  #{column.search}
		                      </when>
		                      <when test="column.data=='woId'">
		                              AND WOID LIKE  #{column.search}
		                      </when>
		                      <when test="column.data=='woName'">
		                              AND WOName LIKE  #{column.search}
		                      </when>
		                      <when test="column.data=='priority'">
		                             AND  Priority LIKE  #{column.search}
		                      </when>
		                      <when test="column.data=='status'">
		                             AND Status LIKE  #{column.search}
		                      </when>
		                      <when test="column.data=='startDate'">
		                             AND convert(nvarchar(50), startdate,126) LIKE  #{column.search}
		                      </when>
		                      <when test="column.data=='endDate'">
		                             AND convert(nvarchar(50), enddate,126) LIKE  #{column.search}
		                      </when>
		                      <when test="column.data=='activity'">
		                             AND Activity LIKE  #{column.search}
		                      </when>
		                      <when test="column.data=='subActivity'">
		                             AND SubActivity LIKE  #{column.search}
		                      </when>
		                     <otherwise>
		                         and ${column.data} like #{column.search}
		                     </otherwise>
		                  </choose>
		                 </if>

		             </foreach>
		             
		             <if test ='dataTableRequest.search != null and dataTableRequest.search != ""'> 
		                    and (
		                       projectid like #{dataTableRequest.search}
		                    or NodeNames like  #{dataTableRequest.search}
		                    or DOID like #{dataTableRequest.search}
		                    or WOID like #{dataTableRequest.search}
		                    or WOName like #{dataTableRequest.search} 
		                    or Priority like  #{dataTableRequest.search}       
		                    or Status like  #{dataTableRequest.search} 
		                    or convert(nvarchar(50), startdate,126) like #{dataTableRequest.search} 
		                    or convert(nvarchar(50), enddate,126) like  #{dataTableRequest.search} 
		                    or Activity like #{dataTableRequest.search} 
		                    or SubActivity like #{dataTableRequest.search} 
		                 ) 
		             </if>
                 </if>


GROUP BY projectid,  
WOID,  
WOName,       
Priority,     
Status,
Activity,
SubActivity,  
subActivityId,       
Type,  
ProficiencyID,
woPlanId,
startdate,    
endDate,      
versionNumber,       
DOID
		  
		  <if test="dataTableRequest != null">    		          
		    <choose>
			  <when test ="dataTableRequest.order != null and dataTableRequest.order.sortDir!=null">
			    order by ${dataTableRequest.order.data} ${dataTableRequest.order.sortDir}
			  </when>
              <otherwise>
			    order by projectid desc
 		      </otherwise>
 		  </choose>
			<if test ='dataTableRequest.length != -1'>
				OFFSET ${dataTableRequest.start} ROWS
				FETCH NEXT ${dataTableRequest.length} ROWS ONLY
			</if>
	     </if>
			
	</select>




	<select id='getBookingDetailsByWoid'
		resultType="com.ericsson.isf.model.BookingDetailsModel">
		select top 1 bd.BookingID,bd.enddate,bd.Status from
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS bd
		left join
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS sd on
		sd.bookingid=bd.bookingid
		where bd.WOID = #{woID} AND bd.Type !=
		'LEADTIME'
		order by bookingID desc
	</select>

	<select id='getAssignedWorkOrders'
		resultMap='WorkOrderBasicDetailsModelResult'>
		
		SET
        TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

		 declare @DefProdID TINYINT ,@KPIID INT,@ExpProfID TINYINT  ,@Signumid varchar(10)
	 
		Select @DefProdID = ProficiencyID from refData.tbl_WF_Proficiency_Type
		where ProficiencyName = 'Assessed'
		;
		select @KPIID = KpiID from REFDATA.TBL_WF_PROFICIENCY_KPI where KpiName = 'Qualify Count'
		and IsActive=1
		; 
		Select @ExpProfID = ProficiencyID from refData.tbl_WF_Proficiency_Type
		where ProficiencyName = 'Experienced' and IsActive = 1  
		;
		
		;with cte  as (	select * 
		from (SELECT *,
		ROW_NUMBER() OVER(PARTITION BY PROJECTID,WFID,SUBACTIVITYID,signumid ORDER BY LastModifiedOn DESC)RN
		FROM TRANSACTIONALDATA.TBL_WORK_FLOW_USER_PROFICIENCY
		WHERE  
	    signumid  = #{signum}) tbl where rn=1)
	
		select wp.projectid,wo.WOID, wo.DOID,
		pdu.DeliverableUnitName,ps.ScopeName as DeliverableName,wo.WOName,
		wo.Priority,wo.Status
		,s.Activity,s.SubActivity,s.subActivityId,wo.woPlanId
		,wo.Plannedstartdate startdate,wo.Plannedenddate endDate,
		def.versionNumber,p.projectname,def.WorkFlowName,
		
		CASE WHEN wo.ProficiencyID IS NOT NULL then wo.ProficiencyID
		 WHEN WFProf.DisplayedMode &lt;&gt; @DefProdID  then WFProf.DisplayedMode
		 WHEN ((WFProf.DisplayedMode is null) or (WFProf.DisplayedMode =@DefProdID )) 
				and  KV.KPIValue = 0
			then @ExpProfID ELSE @DefProdID END as ProficiencyID ,
		CASE WHEN
		emp.EmployeeName is null THEN '['+wo.CreatedBy+']' ELSE
		emp.EmployeeName+'['+wo.CreatedBy+']' END
		as
		EmployeeName,t.Technology,DATEDIFF(HH,wo.plannedstartdate,
		wo.plannedenddate) as slaHours,
		case when nodes.NodeType is null or
		len(nodes.NodeType) &lt; 2 then
		ISNULL(ne.ElementType,'') else ISNULL(nodes.NodeType,'') end
		NodeType,
		ISNULL(nodes.NodeNames,'') as NodeNames,ISNULL(ne.Market,'') as Market,
		wo.IsAutoSenseEnable,
		wo.flowchartdefid
		from

		transactionalData.TBL_WORK_ORDER wo
		inner join
		transactionalData.TBL_Deliverable_Order_ID doi on wo.DOID =
		doi.DOID
		inner join transactionalData.TBL_WORK_ORDER_PLAN wp on wo.WOPlanID =
		wp.WOPlanID
		and wp.ProjectID = wo.PROJECTID
		inner join
		transactionalData.TBL_PROJECTSCOPE ps on wp.ScopeID =
		ps.ProjectScopeID
		inner join refData.TBL_Project_Deliverable_Unit pdu
		on ps.deliverableUnit = pdu.DeliverableUnitID

		join
		transactionalData.TBL_PROJECTS p on wp.projectid = p.projectid
		left
		join refData.TBL_Employees emp on emp.Signum = wo.CreatedBy
		left join
		transactionalData.TBL_WORK_ORDER_NODES as nodes on nodes.WOID =
		wo.WOID
		inner join
		refData.TBL_SUBACTIVITY s on wo.SubActivityID = s.SubActivityID
		inner
		join [refData].[TBL_TECHNOLOGY] t on s.TechnologyID =
		t.TechnologyID
		inner join transactionalData.TBL_SUBACTIVITY_FLOWCHART_DEF def on
		def.ProjectID = wp.ProjectID and
		wo.flowchartdefid=def.SubActivityFlowChartDefID
		and def.SubActivityID =
		wo.SubActivityID and
		wo.WorkFlowVersion=def.versionnumber
		left join transactionalData.TBL_NETWORK_ELEMENT ne on ne.networkelementid=nodes.networkelementid 
		and ne.TechnologyID = s.TechnologyID		
		 LEFT join cte  WFProf
		   ON WO.ProjectID = WFProf.ProjectID 
		   AND WO.signumID = WFProf.SignumID
		   And def.WFID =  WFProf.WFID
		   AND wo.SubActivityID = WFProf.SubActivityID
		   Left Join transactionaldata.TBL_SubactivityFlowChart_Kpi_Value KV
		   On KV.ProjectID = wo.PROJECTID
		   and KV.SubActivityFlowChartDefID = wo.flowchartdefid
		   and KV.SubactivityID = wo.SubActivityID
		   and KV.IsActive =  1
		   and KV.KpiID = @KPIID
		
		where
		wp.active=1 and wo.active=1
		<if test='woStatus != null'>
			and wo.status = #{woStatus}
		</if>
		<if test='signum != null'>
			and wo.SignumID = (#{signum})
		</if>
		<if test='startDate != null and endDate != null'>
			and CONVERT(DATE, wo.Plannedstartdate) between
			#{startDate} and #{endDate}
		</if>

		order by DOID desc,PlannedStartDate desc
	</select>

	<select id='getUnassignedWorkOrders'
		resultMap='WorkOrderBasicDetailsModelResult'>
		{
		call [dbo].[USP_getUnassigned_WorkOrders] (
		#{signum},
		#{startDate},
		#{endDate},
		#{status},
		#{priority},
		#{doStatus}
		)}
	</select>
	
<!-- New Query converted from the Proc -->	
	
	<select id='getProjectQueueWorkOrders'
	resultMap='ProjectQueueWorkOrderBasicDetailsModelResult'>

	declare
       @SIGNUM VARCHAR(15) =${signum},
       @STARTDATE DATE=${startDate},
       @ENDDATE DATE=${endDate},
       @STATUS VARCHAR(15)=${status},
       @PRIORITY VARCHAR(15)=${priority},
       @DOSTATUS VARCHAR(15)=${doStatus},
       @ProjectIDList varchar(max)=${projectIdList}

              
       IF(@DOSTATUS = 'ALL')
       Begin



SELECT 
distinct
wo.projectid ,       
wo.woid, 
wo.doid , 
ps.scopename AS deliverablename,
wo. woname,
s.subactivity ,
wo.priority, 
wo. status, 
wo.woplanid  , 
CONVERT(CHAR(16), wo.plannedstartdate ,20) startdate, 
CONVERT(CHAR(16),wo.plannedenddate ,20) enddate, 
 p.projectname,
wo.signumid as signum,
wo.workflowversion,
def.WorkFlowName,
  CASE 
 WHEN emp.employeename IS NULL THEN '['+wo.createdby+']' 
 ELSE emp.employeename                 +'['+wo.createdby+']' 
END AS employeename, 
t.technology,
wo.flowchartdefid, 
def.wfid,
wo.PriorityLastModifiedOn as priorityModifiedOn,
wo.isautosenseenable , 
sr.srid ,
isnull(ne.type,'' ) nodetype ,
isnull(wn1.NodeNames,'') nodenames ,
isnull(ne.market,'') market,
ne.networkElementID,
Count(*) OVER() recordsTotal




FROM transactionaldata.tbl_work_order WO
LEFT JOIN transactionaldata.tbl_subactivity_flowchart_def def
ON wo.projectid = def.projectid
AND wo.flowchartdefid = def.subactivityflowchartdefid
AND wo.subactivityid = def.subactivityid

<if test="checkSearch==true">
inner  JOIN (select wn.WOID ,min(wn.wnid)as wnid from transactionaldata.tbl_work_order wo1

inner join transactionaldata.tbl_work_order_nodes wn on wo1.woid=wn.woid
left join transactionaldata.tbl_network_Element ne1 on ne1.NetworkElementID=wn.networkelementid
where wo1.projectid in (select name from dbo.splitString(@ProjectIDList, ','))
and wo1.priority=@PRIORITY
AND wo1.active=1
AND wo1.status=@STATUS
AND wo1.subactivityid IS NOT NULL
AND Convert(date, wo1.plannedstartdate) &gt;=@STARTDATE
AND Convert(date, wo1.plannedstartdate) &lt;=@ENDDATE


<foreach item="column" index="index"
 collection="dataTableRequest.columns">
 <if test="column.search != ''">
 <choose>
 <when test="column.data == 'listOfNode[0].nodeNames' or column.data == 'nodeNames'">
 and wn.Nodenames like #{column.search}  
</when>
  <when test="column.data == 'market'">
 and ne1.Market like #{column.search}
 </when>
 </choose>
 </if>
 </foreach>
group by wn.WOID) as N
ON wo.woid=n.woid
</if>


<if test="checkSearch==false">
left JOIN (select wn.WOID ,min(wn.wnid)as wnid from transactionaldata.tbl_work_order wo1
inner join transactionaldata.tbl_work_order_nodes wn on wo1.woid=wn.woid
where wo1.projectid in (select name from dbo.splitString(@ProjectIDList, ','))
and wo1.priority=@PRIORITY
AND wo1.active=1
AND wo1.status=@STATUS
AND wo1.subactivityid IS NOT NULL
AND Convert(date, wo1.plannedstartdate) &gt;=@STARTDATE
AND Convert(date, wo1.plannedstartdate) &lt;=@ENDDATE
group by wn.WOID) as N
ON wo.woid=n.woid
</if>

LEFT JOIN transactionaldata.tbl_service_request SR
ON wo.doid = sr.doid
left join transactionaldata.tbl_work_order_nodes wn1
on wn1.wnid=n.wnid
and wn1.woid=n.woid
left JOIN transactionaldata.tbl_network_Element ne
ON ne.NetworkElementID=wn1.networkElementid
INNER JOIN transactionaldata.tbl_work_order_plan WP (nolock)
ON wo.woplanid = wp.woplanid and def.projectid = wp.projectid
AND wp.projectid = wo.projectid
INNER JOIN transactionaldata.tbl_projectscope PS (nolock)
ON wp.scopeid = ps.projectscopeid
LEFT JOIN refdata.tbl_project_deliverable_unit PDU (nolock)
ON ps.deliverableunit = pdu.deliverableunitid
INNER JOIN refdata.tbl_subactivity S (nolock)
ON wo.subactivityid = s.subactivityid
INNER JOIN transactionaldata.tbl_projects P (nolock)
ON wo.projectid = p.projectid
LEFT JOIN refdata.tbl_employees EMP (nolock)
ON emp.signum = wo.createdby
INNER JOIN [REFDATA].[TBL_TECHNOLOGY] T (nolock)
ON s.technologyid = t.technologyid

WHERE WO.projectid in (select name from dbo.splitString(@ProjectIDList, ','))
and wo.priority=@PRIORITY
AND wo.active=1
AND wo.status=@STATUS
AND wo.subactivityid IS NOT NULL
AND Convert(date, plannedstartdate) &gt;=@STARTDATE
AND Convert(date, plannedstartdate) &lt;=@ENDDATE

<foreach item="column" index="index"
 collection="dataTableRequest.columns">
 <if test="column.search != ''">
 <choose>
 <when test="column.data == 'projectId' ">
 and WO.projectid like #{column.search}
 </when>
 <when test="column.data == 'projectName' ">
 and P.projectName like #{column.search}
 </when>
<!-- <when test="column.data == 'listOfNode[0].market' ">
 and market LIKE #{column.search}
 </when>
 <when test="column.data == 'nodeNames' ">
 and NAME LIKE #{column.search}
</when>  -->
 <when test="column.data == 'doid' ">
 and WO.doid LIKE #{column.search}
 </when>
 <when test="column.data == 'srID' ">
 and SR.srid LIKE #{column.search}
 </when>
 <when test="column.data == 'woId' ">
 and WO.woId LIKE #{column.search}
</when>
 <when test="column.data == 'woName' ">
 and WO.woName LIKE #{column.search}
 </when>
 <when test="column.data == 'deliverableName' ">
 and PS.SCOPENAME LIKE #{column.search}
 </when>
 <when test="column.data == 'signum' or column.data == 'signumid'">
 and WO.SIGNUMID LIKE #{column.search}
 </when>
 <when test="column.data == 'employeeName' ">
 and (emp.employeeName LIKE #{column.search} or 
 WO.CREATEDBY like #{column.search})
 </when>
 <when test="column.data == 'priorityModifiedOn' ">
 and wo.priorityLastmodifiedon LIKE #{column.search}
 </when>
 <when test="column.data == 'subActivity' ">
 and s.subactivity LIKE #{column.search}
 </when>
  <when test="column.data == 'workFlowName' ">
 and def.workflowname LIKE #{column.search}
 </when>
  <when test="column.data == 'technology' ">
 and t.technology LIKE #{column.search}
 </when>
</choose>
</if>

</foreach>
group by
wo.projectid,
wo.woid,
wo.doid ,
WO.WOPlanID,
ps.scopename ,
wo.woname ,
s.subactivity ,
wo.plannedstartdate ,
p.projectname,
def.workflowname,
emp.employeename ,wo.createdby ,
t.technology,
wo.signumid ,
wo.priorityLastmodifiedon ,
wo.isautosenseenable,
wo.flowchartdefid ,
sr.srid,
ne.Market,
ne.type,
wn1.nodenames,
wo.PlannedEndDate,
ne.NetworkElementID,
wo.Priority,
wo.Status,
wo.SubActivityID,
wo.WorkFlowVersion,
def.WFID

<choose>
<when
test="dataTableRequest.order != null and dataTableRequest.order.sortDir!=null">
order by ${dataTableRequest.order.data} ${dataTableRequest.order.sortDir}
</when>
<otherwise>
order by PlannedStartDate Desc
</otherwise>
</choose>



<if test="dataTableRequest.length != -1">
OFFSET ${dataTableRequest.start} ROWS FETCH NEXT ${dataTableRequest.length}
ROWS ONLY
</if>



End
Else IF(@DOSTATUS = 'INPROGRESS')
Begin



SELECT distinct
wo.projectid ,       
wo.woid, 
wo.doid , 
ps.scopename AS deliverablename,
wo. woname, 
s.subactivity ,
wo.priority, 
wo. status, 
wo.woplanid  , 
CONVERT(CHAR(16), wo.plannedstartdate ,20) startdate, 
CONVERT(CHAR(16),wo.plannedenddate ,20) enddate, 
 p.projectname,
wo.signumid as signum,
wo.workflowversion,
def.WorkFlowName,
CASE 
 WHEN emp.employeename IS NULL THEN '['+wo.createdby+']' 
 ELSE emp.employeename                 +'['+wo.createdby+']' 
END AS employeename, 
t.technology,
wo.flowchartdefid, 
def.wfid,

wo.PriorityLastModifiedOn as priorityModifiedOn,
wo.isautosenseenable , 
sr.srid ,
isnull(ne.type,'' ) nodetype ,
isnull(wn1.nodenames,'') nodenames ,
isnull(ne.market,'')market,
ne.networkElementID,
Count(*) OVER() recordsTotal

FROM
transactionaldata.tbl_work_order WO
inner join transactionaldata.tbl_work_order wo1 on wo1.doid=wo.doid and 
wo1.PROJECTID = wo.PROJECTID and wo1.status NOT IN ('ASSIGNED') and wo1.active=1
LEFT JOIN transactionaldata.tbl_subactivity_flowchart_def def
ON wo.projectid = def.projectid
AND wo.flowchartdefid = def.subactivityflowchartdefid
AND wo.subactivityid = def.subactivityid AND wo.workflowversion=def.versionnumber

<if test="checkSearch==true">

inner  JOIN (select wn.WOID ,min(wn.wnid)as wnid from transactionaldata.tbl_work_order wo1

inner join transactionaldata.tbl_work_order_nodes wn on wo1.woid=wn.woid
left join transactionaldata.tbl_network_Element ne1 on ne1.NetworkElementID=wn.networkelementid
where wo1.projectid in (select name from dbo.splitString(@ProjectIDList, ','))
and wo1.priority=@PRIORITY
AND wo1.active=1
AND wo1.status=@STATUS
AND wo1.subactivityid IS NOT NULL
AND Convert(date, wo1.plannedstartdate) &gt;=@STARTDATE
AND Convert(date, wo1.plannedstartdate) &lt;=@ENDDATE 
<foreach item="column" index="index"
 collection="dataTableRequest.columns">
 <if test="column.search != ''">
 <choose>
 <when test="column.data == 'listOfNode[0].nodeNames' or column.data == 'nodeNames'">
 and wn.nodenames like #{column.search}  
</when>
  <when test="column.data == 'market'">
 and ne1.Market like #{column.search}
 </when>
 </choose>
 </if>
 </foreach>
group by wn.WOID) as N
ON wo.woid=n.woid
</if>

<if test="checkSearch==false">
left JOIN (select wn.WOID ,min(wn.wnid)as wnid from transactionaldata.tbl_work_order wo1
inner join transactionaldata.tbl_work_order_nodes wn on wo1.woid=wn.woid
where wo1.projectid in (select name from dbo.splitString(@ProjectIDList, ','))
and wo1.priority=@PRIORITY
AND wo1.active=1
AND wo1.status=@STATUS
AND wo1.subactivityid IS NOT NULL
AND Convert(date, wo1.plannedstartdate) &gt;=@STARTDATE
AND Convert(date, wo1.plannedstartdate) &lt;=@ENDDATE
group by wn.WOID) as N
ON wo.woid=n.woid
</if>



LEFT JOIN transactionaldata.tbl_service_request SR
ON wo.doid = sr.doid
left join transactionaldata.tbl_work_order_nodes wn1
on wn1.wnid=n.wnid
and wn1.woid=n.woid
LEFT JOIN transactionaldata.tbl_network_Element ne
ON ne.NetworkElementID=wn1.networkelementid
INNER JOIN transactionaldata.tbl_work_order_plan WP (nolock)
ON wo.woplanid = wp.woplanid and def.projectid = wp.projectid
AND wp.projectid = wo.projectid
INNER JOIN transactionaldata.tbl_projectscope PS (nolock)
ON wp.scopeid = ps.projectscopeid
LEFT JOIN refdata.tbl_project_deliverable_unit PDU (nolock)
ON ps.deliverableunit = pdu.deliverableunitid
INNER JOIN refdata.tbl_subactivity S (nolock)
ON wo.subactivityid = s.subactivityid
INNER JOIN transactionaldata.tbl_projects P (nolock)
ON wo.projectid = p.projectid
LEFT JOIN refdata.tbl_employees EMP (nolock)
ON emp.signum = wo.createdby
INNER JOIN [REFDATA].[TBL_TECHNOLOGY] T (nolock)
ON s.technologyid = t.technologyid

WHERE WO.projectid in (select name from dbo.splitString(@ProjectIDList, ','))
and wo.priority=@PRIORITY
AND wo.active=1
AND wo.status=@STATUS
AND wo.subactivityid IS NOT NULL
AND Convert(date, wo.plannedstartdate) &gt;=@STARTDATE
AND Convert(date, wo.plannedstartdate) &lt;=@ENDDATE
 <foreach item="column" index="index"
 collection="dataTableRequest.columns">
 <if test="column.search != ''">
 <choose>
 <when test="column.data == 'projectId' ">
 and WO.projectid like #{column.search}
 </when>
 <when test="column.data == 'projectName' ">
 and P.projectName like #{column.search}
 </when>
<!-- <when test="column.data == 'listOfNode[0].market' ">
 and market LIKE #{column.search}
 </when>
 <when test="column.data == 'nodeNames' ">
 and NAME LIKE #{column.search}
</when>  -->
 <when test="column.data == 'doid' ">
 and WO.doid LIKE #{column.search}
 </when>
 <when test="column.data == 'srID' ">
 and SR.srid LIKE #{column.search}
 </when>
 <when test="column.data == 'woId' ">
 and WO.woId LIKE #{column.search}
</when>
 <when test="column.data == 'woName' ">
 and WO.woName LIKE #{column.search}
 </when>
 <when test="column.data == 'deliverableName' ">
 and PS.SCOPENAME LIKE #{column.search}
 </when>
 <when test="column.data == 'signum' or column.data == 'signumid'">
 and WO.SIGNUMID LIKE #{column.search}
 </when>
 <when test="column.data == 'employeeName' ">
 and (emp.employeeName LIKE #{column.search} or WO.CREATEDBY like
 #{column.search})
 </when>
  <when test="column.data == 'priorityModifiedOn' ">
 and wo.priorityLastmodifiedon LIKE #{column.search}
 </when>
 <when test="column.data == 'subActivity' ">
 and s.subactivity LIKE #{column.search}
 </when>
  <when test="column.data == 'workFlowName' ">
 and def.workflowname LIKE #{column.search}
 </when>
  <when test="column.data == 'technology' ">
 and t.technology LIKE #{column.search}
 </when>
</choose> 
</if>
</foreach>
group by
wo.projectid,
wo.woid,
wo.doid ,
WO.WOPlanID,
ps.scopename ,
wo.woname ,
s.subactivity ,
wo.plannedstartdate ,
p.projectname,
def.workflowname,
emp.employeename ,wo.createdby ,
t.technology,
wo.signumid ,
wo.priorityLastmodifiedon ,
wo.isautosenseenable,
wo.flowchartdefid ,
sr.srid,
ne.Market,
ne.type,
wn1.nodenames,
wo.PlannedEndDate,
ne.NetworkElementID,
wo.Priority,
wo.Status,
wo.SubActivityID,
wo.WorkFlowVersion,
def.WFID

<choose>
<when
test="dataTableRequest.order != null and dataTableRequest.order.sortDir!=null">
order by ${dataTableRequest.order.data} ${dataTableRequest.order.sortDir}
</when>
<otherwise>
order by PlannedStartDate Desc
</otherwise>
</choose>



<if test="dataTableRequest.length != -1">
OFFSET ${dataTableRequest.start} ROWS FETCH NEXT ${dataTableRequest.length}
ROWS ONLY
</if>


END



</select>

	<select id='getWOData'
		resultType="com.ericsson.isf.model.WorkOrderModel">
		select active,signumID,status from transactionalData.TBL_WORK_ORDER where WOID =
		#{getwOID};

	</select>

	<update id='updateWoWithAsignedSignum'>
		UPDATE transactionalData.TBL_WORK_ORDER SET SignumID=
		#{woData.signumID},
		LASTMODIFIEDDATE=dbo.GetDateIST(), 
		LASTMODIFIEDBY=#{woData.senderSignum},
		IsAutoSenseEnable=NULL
		WHERE WOID=#{woData.wOID}

	</update>

	<insert id='insertWOTransferHistory'>
		INSERT INTO
		transactionalData.TBL_WORK_ORDER_TRANSFER_LOG_HISTORY
		(WOID,SENDERID,RECEIVERID)
		values
		(#{woData.wOID},#{woData.senderSignum},#{woData.signumID})
	</insert>
	<select id='getAdhocWorkOrderDetails'
		resultMap='AdhocWorkOrderModelResult'>
		SELECT *FROM transactionalData.TBL_ADHOC_WORK_ORDER WHERE
		CREATEDBY=#{signumID} AND ACTIVE= 1
	</select>

	<select id='getAdhocWorkOrderDetailsByID'
		resultMap='AdhocWorkOrderModelResult'>
		SELECT *FROM transactionalData.TBL_ADHOC_WORK_ORDER WHERE
		CREATEDBY=#{signumID} AND AdhocWOID=#{adhocWOID} AND ACTIVE= 1
	</select>

	<insert id='saveFeedback'>
		INSERT INTO
		transactionalData.TBL_EMPLOYEE_FEEDBACK(SignumID,FeedBack)
		values
		(#{signumID},#{feedback})
	</insert>

	<select id='checkIFWOIDExists' resultType="Boolean">
		IF Exists(SELECT 1
		FROM transactionalData.TBL_WORK_ORDER where WOID =
		#{woID} and
		Active=1)
		Begin
		Select 1 as 'Result'
		End
		else
		Begin
		Select 0 as 'Result'
		End
	</select>

	<select id='getProjectIDByTaskiD' resultType="Integer">
		select distinct
		projectid from [transactionalData].TBL_SCOPEID_TASK_MAPPING
		where
		taskid = #{taskid}
	</select>

	<select id='getNodesByWoId' resultType="String">
		select (
		select NodeNames+
		','
		from transactionalData.TBL_WORK_ORDER_NODES t2
		where WOID=#{wOID}
		for xml path('')) as NodeNames
	</select>

	<select id='getTotalBookingHoursForStep' resultType="Integer">
		select
		sum(b.hours)
		from
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS b
		inner join transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS sd
		on
		sd.WOID=b.WOID
		where
		b.type='BOOKING' and b.status='COMPLETED' and
		b.woid=#{woid} and sd.FlowChartStepID=#{stepId}
	</select>



	<update id='updateWorkOrderStatus'
		parameterType='WorkOrderModel'>
		UPDATE transactionalData.TBL_WORK_ORDER SET STATUS=
		#{status},
		LASTMODIFIEDDATE=dbo.GetDateIST(), LASTMODIFIEDBY= #{signumID},
		STATUSCOMMENT=#{comment}
		WHERE WOID=#{woID}

	</update>
	<update id='startWorkorder'>
		update transactionalData.TBL_WORK_ORDER set Status =
		'INPROGRESS',
		ActualStartDate = dbo.GetDateIST(),
		LastModifiedDate =
		dbo.GetDateIST(),LastModifiedBy=#{signum} where WOID = #{woId}
	</update>


	<resultMap type='WorkOrderBookingDetailsModel'
		id='WorkOrderBookingDetailsModelResult'>
		<id property='bookingID' column='BookingID' />
		<result property='wOID' column='WOID' />
		<result property='taskID' column='TaskID' />
		<result property='startDate' column='StartDate' />
		<result property='endDate' column='EndDate' />
		<result property='hours' column='Hours' />
		<result property='parentBookingDetailsID'
			column='ParentBookingDetailsID' />
		<result property='type' column='Type' />
		<result property='status' column='Status' />
		<result property='signumID' column='SignumID' />
	</resultMap>
	
	<update id='updateStatusandProficiencyId'>
			update transactionalData.TBL_WORK_ORDER 
			set Status = 'INPROGRESS'
			,LastModifiedBy= #{signumID}
			,LastModifiedDate=dbo.GetDateIST()
			<if test="updateActualStartDate == true">
				,ActualStartDate = dbo.GetDateIST()
			</if>
			<if test="proficiencyID!=-1">
				,ProficiencyID=#{proficiencyID}
			</if>
			where WOID = #{wOID}
		
	</update>

	<update id='updateStatusWO'>
		IF Exists(select 1 from transactionalData.TBL_WORK_ORDER where WOID =
		#{wOID} and Status in ('ONHOLD','REOPENED'))
		Begin
		update wo
		set wo.Status = 'INPROGRESS',
		wo.ActualStartDate = dbo.GetDateIST(),
		wo.workflowversion = sfd.VersionNumber
		from
		transactionalData.TBL_WORK_ORDER wo
		join
		[transactionalData].[TBL_SUBACTIVITY_FLOWCHART_DEF] sfd on
		wo.flowchartdefid = sfd .SubActivityFlowChartDefID
		where WOID = #{wOID}
		End
		ELse IF Exists(select 1 from transactionalData.TBL_WORK_ORDER 
        where WOID = #{wOID} and Status in ('ASSIGNED'))
		BEGIN
		update wo 
		set wo.Status = 'INPROGRESS',
		wo.ActualStartDate = dbo.GetDateIST(),
		wo.workflowversion = sfd.VersionNumber 
		from transactionalData.TBL_WORK_ORDER wo 
		join [transactionalData].[TBL_SUBACTIVITY_FLOWCHART_DEF] sfd 
		on wo.flowchartdefid = sfd .SubActivityFlowChartDefID 
		where WOID = #{wOID}
		END 
		
	</update>

	<select id='startWorkOrderTask' statementType="CALLABLE">
		{call
		user_sp_startWorkOrder_V2(
		#{wOID,mode=IN, jdbcType=INTEGER},
		#{taskID,mode=IN, jdbcType=INTEGER},
		#{signum,mode=IN,
		jdbcType=VARCHAR})}
	</select>

	<select id='getBookingDetails'
		resultMap="WorkFlowBookingDetailsModelResult">
		Select woid,TaskID,BookingID,Status
		from
		(
		Select
		row_number() Over(Partition by woid,TaskID,signumID Order by bookingID desc) as rnum,
		woid,TaskID,BookingID,Status
		From
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS bd
		where bd.Type !='LEADTIME'
		and WOID= #{wOID} and taskID =#{taskID} and signumID =#{signumID}
		) t
		Where rnum = 1
	</select>
	
	<select id="getStartedBookingsBySignum" resultType="com.ericsson.isf.model.BookingDetailsModel">
		SET
		TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
		
		select
		bookingID,woId,taskId,startdate,enddate,hours,parentBookingDetailsId,type,status,signumId,reason,outputLink,
		parallelcount,referenceId,source_id sourceid,flowchartdefID, flowChartStepID, executionType,decisionValue, botPlatform
		from [transactionalData].TBL_WORK_ORDER_BOOKING_DETAILS
		where [status]
		in ('STARTED')
		and SignumID=#{signum}
	</select>

	<select id='getBookingsByWoId'
		resultType="com.ericsson.isf.model.BookingDetailsModel">
		select * from
		[transactionalData].TBL_WORK_ORDER_BOOKING_DETAILS
		where
		[status] in
		('STARTED','ONHOLD','SKIPPED')
		and WOID=#{wOID}
	</select>

	<select id='getBookingsByWoIdAndFcStepId'
		resultType="com.ericsson.isf.model.BookingDetailsModel">
		select * from
		[transactionalData].TBL_WORK_ORDER_BOOKING_DETAILS
		where
		WOID=#{wOID}
		and FlowChartstepid = #{flowChartStepId}
	</select>

	<!-- <update id='updateBookingsStatus'> UPDATE[transactionalData].[TBL_WORK_ORDER_BOOKING_DETAILS] 
		set [EndDate]=dbo.GetDateIST(),[Hours]=Round(DATEDIFF ( MI , startdate,dbo.GetDateIST() 
		)/60.0, 2),[status]=#{status} ,[type]=#{type} where bookingid in (${bookingids}); 
		</update> -->
	<update id='updateBookingsStatus'>
		UPDATE [transactionalData].[TBL_WORK_ORDER_BOOKING_DETAILS]
		set
		[EndDate]= dbo.GetDateIST(),[Hours]=DATEDIFF ( MI
		,
		startdate,dbo.GetDateIST() )/60.0,[status]=#{status}
		,[type]=#{type},[Reason]=#{reason},
		ModifiedDate = dbo.GetDateIST()
		where bookingid in (${bookingids});

	</update>

	<update id='updateReasonByBookingIds'>
		UPDATE [transactionalData].[TBL_WORK_ORDER_BOOKING_DETAILS]
		set reason = #{status},
		ModifiedDate = dbo.GetDateIST()
		where bookingid in (${bookingid});
	</update>

	<update id='updateBookingsStatusByIds'>
		UPDATE[transactionalData].[TBL_WORK_ORDER_BOOKING_DETAILS]
		set
		[status]=#{status}, EndDate=dbo.GetDateIST(),
		Hours = DATEDIFF(ss, StartDate, dbo.GetDateIST())/3600.0,
		ModifiedBy = #{signumID},
		ModifiedDate = dbo.GetDateIST()
		where bookingid in
		(${bookingids});

	</update>

	<insert id='insertBooking' parameterType="java.util.List"
		useGeneratedKeys="true" keyProperty="bookingID" keyColumn="bookingID">
		insert into
		[transactionalData].[TBL_WORK_ORDER_BOOKING_DETAILS]([WOID],[TaskID],[StartDate],[EndDate],[ParentBookingDetailsID],[Type],[Status],[SignumID]
		,[Reason],[outputLink],[parallelcount],[CreatedBy],[CreatedDate],[ModifiedBy] ,[ModifiedDate])
		values

		<foreach collection="list" item="booking" separator=",">
			(
			#{booking.woId},#{booking.taskId},convert(varchar(25),
			#{booking.startDate}, 120),convert(varchar(25), #{booking.endDate,
			jdbcType = TIMESTAMP}, 120),
			#{booking.parentBookingDetailsId},#{booking.type},#{booking.status}
			,#{booking.signumId},#{booking.reason},#{booking.outputLink},#{booking.parallelcount},
			#{booking.signumId} , dbo.GetDateIST(),#{booking.signumId} , dbo.GetDateIST()
			)
		</foreach>
	</insert>

	
		<insert id='addBooking'
        parameterType="com.ericsson.isf.model.BookingDetailsModel"
        useGeneratedKeys="true" keyProperty="booking.bookingID"
        keyColumn="bookingID">
        insert into
        [transactionalData].[TBL_WORK_ORDER_BOOKING_DETAILS]([WOID],[TaskID],[StartDate],[EndDate],[ParentBookingDetailsID],[Type],[Status],[SignumID]
        ,[Reason],[outputLink],[parallelcount]
        ,referenceId
        <if test="booking.endDate != null">
            ,[hours]
        </if>
        ,CreatedBy,CreatedDate,ModifiedBy ,ModifiedDate,source_id,FlowchartdefID, FlowChartStepID, ExecutionType,DecisionValue
        <if test="booking.botPlatform != null">
            ,[BotPlatform]
        </if>
        )
        values(
        #{booking.woId},#{booking.taskId},convert(varchar(25),
        dbo.GetDateIST(), 120),convert(varchar(25), #{booking.endDate, jdbcType =
        TIMESTAMP}, 120),
        #{booking.parentBookingDetailsId},#{booking.type},#{booking.status}
        ,#{booking.signumId},#{booking.reason},#{booking.outputLink},#{booking.parallelcount},#{booking.referenceId}
        <if test="booking.endDate != null">
            ,DATEDIFF ( MI , dbo.GetDateIST(),#{booking.endDate} )/60.0
        </if>
        ,#{booking.signumId} ,dbo.GetDateIST(),#{booking.signumId},dbo.GetDateIST()
        ,#{booking.sourceid},#{booking.flowChartDefID},#{booking.flowChartStepID},#{booking.executionType},#{booking.decisionValue}
        <if test="booking.botPlatform != null">
            ,#{booking.botPlatform}
        </if>
        )
    </insert>
 
	


	<select id='selectFcStepDetailsByBookingIds'
		resultType="com.ericsson.isf.model.FcStepDetails">
		select * from
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS where
		BookingID in ( ${bookingids} )
	</select>
	<insert id='insertFcStepDetails' parameterType="java.util.List">
		Insert into
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS(WOID,FlowChartDefID,FlowChartStepID,TaskID,BookingID,Status,SignumID,BookedOn,DecisionValue,ExecutionType,
		botPlatform,CreatedBy , CreatedDate , ModifiedBy ,ModifiedDate)
		Values
		<foreach collection="stepList" item="step" separator=",">
			(
			#{step.woId},#{step.flowChartDefId},#{step.flowChartStepId},#{step.taskID},#{step.bookingID},#{step.status}
			,#{step.signumId},dbo.GetDateIST(),#{step.decisionValue},#{step.executionType},#{step.botPlatform},#{step.signumId}, dbo.GetDateIST() , #{step.signumId} , dbo.GetDateIST()
			)
		</foreach>
	</insert>
	<update id='updateFcStepStatusByBookingIds'>
		UPDATE
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS
		set Status = #{status} , 
		ModifiedDate = dbo.GetDateIST(),
		BookedOn = dbo.GetDateIST()
		where BookingID in ( ${bookingids} )
	</update>

	<select id='stopWOMaxBookingID'
		resultMap="WorkFlowBookingDetailsModelResult">
		<!-- select a1.WOID,a1.TaskID,a1.BookingID,a2.Status, a2.Reason,
		a2.type
		from
		(
		select woid,taskID,max(bookingID) as bookingID
		from
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS bd
		where bd.Type !=
		'LEADTIME'
		group by woid,TaskID
		) as a1
		inner join
		(
		select WOID, TaskID,
		BookingID ,Status, Reason, type
		from
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS bd
		where bd.Type !=
		'LEADTIME'
		) as a2
		on a1.WOID = a2.WOID
		and a1.TaskID = a2.TaskID
		and
		a1.bookingID = a2.BookingID
		where a1.WOID = #{woID} and a1.taskID
		=#{taskID} -->
		
		select WOID,TaskID, BookingID,Status,Reason,Type from (
		 select ROW_NUMBER () over (partition by WOID,TaskID order by BookingID desc) rn ,BookingID
		 ,WOID,TaskID, Status,Reason,Type
		 from  transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS where Type !='LEADTIME'
		and WOID = #{woID} and taskID =#{taskID}
		)TBL where rn=1
	</select>
	
	<select id='maxQueuedBookingID'
		resultMap="WorkFlowBookingDetailsModelResult">
		Select WOID,TaskID,BookingID,Status, Reason
		from
		(
		Select
		row_number() Over(Partition by woid,TaskID Order by bookingID desc) as rnum,
		woid,TaskID,BookingID,Status, reason
		From
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS bd
		where bd.Type !='LEADTIME' and bd.Type ='QUEUED'
		and WOID= #{woID} and taskID =#{taskID}
		) t
		Where rnum = 1

	</select>

	<select id='stopWOMaxBookingIDNew'
		resultMap="WorkFlowBookingDetailsModelResult">
		<!-- select distinct
		a1.WOID,a1.TaskID,a1.BookingID,a2.Status,a2.Reason,a2.type
		from
		(
		select
		bd.woid,bd.taskID,max(bd.bookingID) as bookingID, sd.FlowChartStepID
		 from  transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS bd
		 join
            transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS sd on
            sd.TaskID = bd.TaskID and sd.WOID = bd.WOID
		where bd.WOID = #{woID} and
		bd.taskID =#{taskID} and sd.FlowChartStepID =
		#{stepid} and bd.Type !=
		'LEADTIME'
		group by bd.WOID ,bd.taskID, sd.FlowChartStepID
		) as a1
		join
		(
		select bd.WOID, bd.TaskID, bd.BookingID ,bd.Status,
		sd.FlowChartStepID,bd.Reason, bd.type from
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS bd
		join
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS sd on
		sd.TaskID = bd.TaskID and sd.WOID = bd.WOID
		where bd.WOID = #{woID} and
		bd.taskID =#{taskID} and sd.FlowChartStepID =
		#{stepid} and bd.Type !=
		'LEADTIME'
		) as a2
		on a1.WOID = a2.WOID
		and a1.TaskID = a2.TaskID
		and
		a1.FlowChartStepID = a2.FlowChartStepID
		and a1.bookingID = a2.BookingID
		 -->
		 <!-- Optimized query  -->
		select WOID,TaskID, BookingID,Status,Reason,Type,ExecutionType from (
		 select ROW_NUMBER () over (partition by bd.WOID,bd.TaskID, sd.FlowChartStepID order by bd.BookingID desc) rn ,bd.BookingID
		 ,bd.WOID,bd.TaskID, bd.Status,Reason,Type,sd.ExecutionType
		 from  transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS bd
		 join
            transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS sd on
            sd.TaskID = bd.TaskID and sd.WOID = bd.WOID and sd.BookingID=bd.BookingID
			where Type !='LEADTIME'
		and bd.WOID = #{woID} and bd.taskID =#{taskID} and sd.FlowChartStepID = #{stepid} 
		)TBL where rn=1
	</select>

	<select id='stopWorkOrderTask' statementType="CALLABLE">
		{call
		user_sp_stopWorkOrder_V2(
		#{wOID,mode=IN, jdbcType=INTEGER},
		#{taskID,mode=IN, jdbcType=INTEGER},
		#{signum,mode=IN,
		jdbcType=VARCHAR},
		#{bookingID,mode=IN, jdbcType=INTEGER})}
	</select>

	<resultMap type='WorkOrderCompleteDetailsModel'
		id='WorkOrderCompleteDetailsModelResult'>
		<id property="wOID" column="WOID" />
		<result property="wOPlanID" column="WOPlanID" />
		<result property="projectID" column="ProjectID" />
		<result property="project" column="Project" />
		<result property="wOName" column="WOName" />
		<result property="startDate" column="StartDate" />
		<result property="startTime" column="StartTime" />
		<result property="priority" column="Priority" />
		<result property="domainID" column="DomainID" />
		<result property="domain" column="DomainSubDomain" />
		<result property="technologyID" column="TechnologyID" />
		<result property="technology" column="Technology" />
		<result property="serviceAreaID" column="ServiceAreaID" />
		<result property="serviceArea"
			column="ServiceAreaSubServiceArea" />
		<result property="subActivityID" column="SubActivityID" />
		<result property="activity" column="ActivitySubActivity" />
		<result property="effort" column="Estimatedeffort" />
		<result property="vendor" column="Vendor" />
		<result property="signumID" column="SignumID" />
		<result property="woNameAlias" column="WONameAlias" />
		<result property="endDate" column="EndDate" />
		<result property="endTime" column="EndTime" />
		<result property="workFlowName" column="WorkFlowName" />
		<result property="customerName" column="CustomerName" />
		<result property="slaHrs" column="SLAHrs" />
		<result property="status" column="Status" />
		<result property="externalGroup" column="ExternalGroup" />
		<result property="doID" column="DOID" />

		<collection property='listOfNode'
			ofType='WorkOrderNodesModel'>
			<id property='wNID' column='WNID' />
			<result property="wOID" column="WOID" />
			<result property='nodeType' column='NodeType' />
			<result property='nodeNames' column='NodeNames' />
			<result property="market" column="Market" />
		</collection>

		<collection property='listOfInputUrl' ofType='com.ericsson.isf.model.WOInputFileModel'>
			<id property='id' column='ID' />
			<result property='inputName' column="InputName" />
			<result property='inputUrl' column='InputUrl' />
		</collection>
		
	</resultMap>

	<resultMap type='InProgressWorkOrderModel'
		id='InProgressWorkOrderModelResult'>
		<id property="wOID" column="WOID" />
		<result property="wOName" column="WOName" />
		<result property="projectID" column="ProjectID" />
		<result property="wOPlanID" column="wOPlanID" />
		<result property="plannedStartDate" column="PlannedStartDate" />
		<result property="plannedEndDate" column="PlannedEndDate" />
		<result property="actualStartDate" column="ActualStartDate" />
		<result property="actualEndDate" column="ActualEndDate" />
		<result property="signumID" column="SignumID" />
		<result property="status" column="Status" />
		<result property="active" column="Active" />
		<result property="createdBy" column="CreatedBy" />
		<result property="createdDate" column="CreatedDate" />
		<result property="lastModifiedBy" column="LastModifiedBy" />
		<result property="lastModifiedDate" column="LastModifiedDate" />
		<result property="priority" column="Priority" />
		<result property="closedOn" column="ClosedOn" />
		<result property="adHocWoID" column="AdhocWOID" />
		<result property="statusComment" column="StatusComment" />
		<result property='nodeType' column='NodeType' />
		<result property='nodeNames' column='NodeNames' />
		<result property="subActivityID" column="SubActivityID" />
		<result property="subActivity" column="SubActivity" />
		<result property="estimatedEffort" column="EstimatedEffort" />
		<result property="subActivityFlowChartDefID"
			column="SubActivityFlowChartDefID" />
		<result property='automatedHours' column='AutomatedHours' />
		<result property='manualHours' column='ManualHours' />
		<result property='totalHours' column='TotalHours' />
		<result property='nodeCount' column='NodeCount' />
		<result property='wFName' column='WorkFlowName' />
		<result property='versionNO' column='WorkFlowVersion' />
		<collection property='listOfStepTaskDetails'
			ofType='StepTaskModel'>
			<id property="stepID" column="StepID" />
			<result property="stepName" column="StepName" />
			<collection property='listOfTaskModel' ofType='TaskModel'>
				<id property="taskID" column="TaskID" />
				<result property="subActivityID" column="SubActivityID" />
				<result property="rpaID" column="RpaID" />
				<result property="task" column="Task" />
				<result property="executionType" column="ExecutionType" />
				<result property="avgEstdEffort" column="AvgEstdEffort" />
				<result property="description" column="TaskDescription" />
				<collection property='lstBookingDetailsModels'
					ofType='WorkOrderBookingDetailsModel'>
					<id property='bookingID' column='BookingID' />
					<result property='wOID' column='WOID' />
					<result property='taskID' column='TaskID' />
					<result property='hours' column='Hours' />
					<result property='status' column='BookingStatus' />
					<result property='type' column='Type' />
					<result property='startDate' column='StartDate' />
					<result property='endDate' column='EndDate' />
					<result property='signumID' column='SignumID' />
				</collection>
			</collection>
		</collection>
	</resultMap>

	<resultMap type='CurrentWorkOrderModel'
		id='CurrentWorkOrderModelResult'>
		<id property="wOID" column="WOID" />
		<result property="wOName" column="WOName" />
		<result property="projectID" column="ProjectID" />
		<result property="wOPlanID" column="wOPlanID" />
		<result property="plannedStartDate" column="PlannedStartDate" />
		<result property="plannedEndDate" column="PlannedEndDate" />
		<result property="actualStartDate" column="ActualStartDate" />
		<result property="actualEndDate" column="ActualEndDate" />
		<result property="signumID" column="SignumID" />
		<result property="status" column="Status" />
		<result property="active" column="Active" />
		<result property="createdBy" column="CreatedBy" />
		<result property="createdDate" column="CreatedDate" />
		<result property="lastModifiedBy" column="LastModifiedBy" />
		<result property="lastModifiedDate" column="LastModifiedDate" />
		<result property="priority" column="Priority" />
		<result property="closedOn" column="ClosedOn" />
		<result property="adHocWoID" column="AdhocWOID" />
		<result property="statusComment" column="StatusComment" />
		<result property="subActivityID" column="SubActivityID" />
		<result property="subActivity" column="SubActivity" />
		<result property="estimatedEffort" column="EstimatedEffort" />
		<result property="serverTime" column="ServerTime" />
		<result property="subActivityFlowChartDefID"
			column="SubActivityFlowChartDefID" />
		<result property="versionNumber" column="VersionNumber" />
		<result property="workFlowName" column="WorkFlowName" />
		<result property="serverPlatform" column="botPlatform" />
		<result property="outputUpload" column="OutputUpload" />
		<collection property='listOfStepTaskDetails'
			ofType='StepTaskModel'>
			<id property="stepID" column="StepID" />
			<result property="stepName" column="StepName" />
			<collection property='listOfTaskModel' ofType='TaskModel'>
				<id property="taskID" column="TaskID" />
				<result property="subActivityID" column="SubActivityID" />
				<result property="rpaID" column="RpaID" />
				<result property="task" column="Task" />
				<result property="executionType" column="ExecutionType" />
				<result property="avgEstdEffort" column="AvgEstdEffort" />
				<result property="description" column="TaskDescription" />
				<result property="isInputRequired" column="isInputRequired" />
				<collection property='lstBookingDetailsModels'
					ofType='WorkOrderBookingDetailsModel'>
					<id property='bookingID' column='BookingID' />
					<result property='wOID' column='WOID' />
					<result property='taskID' column='TaskID' />
					<result property='hours' column='Hours' />
					<result property='status' column='BookingStatus' />
					<result property='type' column='Type' />
					<result property='startDate' column='StartDate' />
					<result property='endDate' column='EndDate' />
					<result property='signumID' column='SignumID' />
				</collection>
			</collection>
		</collection>
	</resultMap>

<resultMap type='com.ericsson.isf.model.WoCompleteDetailsModel'
		id='WorkOrderCompleteDetailsModelResult1'>
		<id property="wOID" column="WOID" />
		<result property="wOPlanID" column="WOPlanID" />
		<result property="projectID" column="ProjectID" />
		<result property="project" column="Project" />
		<result property="wOName" column="WOName" />
		<result property="startDate" column="StartDate" />
		<result property="startTime" column="StartTime" />
		<result property="priority" column="Priority" />
		<result property="domainID" column="DomainID" />
		<result property="domain" column="DomainSubDomain" />
		<result property="technologyID" column="TechnologyID" />
		<result property="technology" column="Technology" />
		<result property="serviceAreaID" column="ServiceAreaID" />
		<result property="serviceArea"
			column="ServiceAreaSubServiceArea" />
		<result property="subActivityID" column="SubActivityID" />
		<result property="activity" column="ActivitySubActivity" />
		<result property="effort" column="Estimatedeffort" />
		<result property="vendor" column="Vendor" />
		<result property="signumID" column="SignumID" />
		<result property="woNameAlias" column="WONameAlias" />
		<result property="endDate" column="EndDate" />
		<result property="endTime" column="EndTime" />
		<result property="workFlowName" column="WorkFlowName" />
		<result property="customerName" column="CustomerName" />
		<result property="slaHrs" column="SLAHrs" />
		<result property="status" column="Status" />
		<result property="externalGroup" column="ExternalGroup" />
		<result property="doID" column="DOID" />
		<result property="count" column="NeCount" />
		<result property="neCsv" column="NeCSV" />
		<collection property='listOfNode'
			ofType='WorkOrderNodesModel'>
			<id property='wNID' column='WNID' />
			<result property="wOID" column="WOID" />
			<result property='nodeType' column='NodeType' />
			<result property='nodeNames' column='NodeNames' />
			<result property="market" column="Market" />
		</collection>

		<collection property='listOfInputUrl' ofType='com.ericsson.isf.model.WOInputFileModel'>
			<id property='id' column='ID' />
			<result property='inputName' column="InputName" />
			<result property='inputUrl' column='InputUrl' />
		</collection>
		
	</resultMap>
	<select id='getInProgressWorkOrderDetails'
		resultMap="InProgressWorkOrderModelResult">
		{call user_sp_getInProgressWODetails( #{signumID,mode=IN,
		jdbcType=VARCHAR})}
	</select>

	<select id='getCurrentWorkOrderDetails'
		resultMap="CurrentWorkOrderModelResult">
		{call user_sp_getCurrentWODetails( #{signumID,mode=IN,
		jdbcType=VARCHAR},
		#{isApproved,mode=IN, jdbcType=VARCHAR}
		)};
	</select>

	<select id='checkParallelWorkOrderDetails'
		resultType="java.util.LinkedHashMap">
		{call user_sp_getCurrentWODetails( #{signumID,mode=IN,
		jdbcType=VARCHAR},
		#{isApproved,mode=IN, jdbcType=VARCHAR}
		)};
	</select>

	<select id='getCompleteWorkOrderDetails'
	resultMap="WorkOrderCompleteDetailsModelResult">
		{call usp_getCompleteWorkOrderDetails(
	        #{wOID, jdbcType=INTEGER},
	        #{columnNames,jdbcType=VARCHAR})};
	 </select>


	<select id='getWorkflowStepDetails'
		resultType="com.ericsson.isf.model.WorkflowStepDetailModel">
		SELECT st.StepName, st.Task as taskName,
		st.ExecutionType,st.StepID
		FROM
		transactionalData.TBL_FLOWCHART_STEP_DETAILS st
		JOIN refdata.tbl_task
		tsk ON st.TaskID = tsk.taskID
		WHERE st.Task IS NOT NULL
		AND st.Task !=
		''
		AND st.Active=1
		and
		SubActivityFlowChartDefID=#{subActivityFlowChartDefID}
	</select>


	<select id='getWorkflowStepDetailsForComments'
		resultType="com.ericsson.isf.model.WorkflowStepDetailModel">
		SELECT st.StepName, st.Task as taskName,
		st.ExecutionType,st.StepID
		FROM
		transactionalData.TBL_FLOWCHART_STEP_DETAILS st
		LEFT JOIN
		refdata.tbl_task tsk ON st.TaskID = tsk.taskID
		WHERE st.Task IS NOT
		NULL
		AND st.Task != ''
		AND st.Active=1
		AND StepType NOT IN
		('ericsson.StartStep','ericsson.EndStep')
		and
		SubActivityFlowChartDefID=#{subActivityFlowChartDefID}
	</select>




	<select id='checkWorkOrder' resultType="Boolean">
		IF Exists(SELECT 1 FROM
		transactionalData.TBL_WORK_ORDER where WOID =
		#{wOID} and Status =
		'CLOSED')
		Begin
		Select 1 as 'Result'
		End
		else
		Begin
		Select 0 as 'Result'
		End
	</select>

	<select id='checkWorkOrderBookingStatus' resultType="Boolean">
		IF
		Exists(SELECT 1 FROM transactionalData.TBL_WORK_ORDER WO
		INNER JOIN
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS BK ON WO.WOID =
		BK.WOID
		where WO.WOID =#{wOID} and BK.Type not in('LEADTIME') and
		BK.Status
		in('STARTED','ONHOLD'))
		Begin
		Select 1 as 'Result'
		End
		else
		Begin
		Select 0 as 'Result'
		End
	</select>


	<select id='checkWorkOrderBookingStatusReason'
		resultType="Boolean">

	<!--  	DROP TABLE IF EXISTS tempdb.dbo.#T2
		DROP TABLE IF EXISTS tempdb.dbo.#T3
		DROP TABLE IF EXISTS tempdb.dbo.#T1
		DROP TABLE IF EXISTS tempdb.dbo.#T4


		select DISTINCT FailureReason
		into #T4  from	refData.TBL_WORK_ORDER_FAILURE_REASON 

		
		select DISTINCT BK.TaskID, FSD.FlowChartStepID, BK.BookingID
		into #T2
		from
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS BK
		INNER JOIN [transactionalData].[TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS] FSD
		ON BK.WOID= FSD.WOID and BK.TaskID= FSD.TaskID  and Bk.BookingID=FSD.BookingID
		 where BK.WOID = #{wOID}
		and (BK.Reason in ( select * from #T4)
		or  Bk.Reason in ('FAIL:BOT Execution Fail'))
		and FSD.ExecutionType in ('AUTOMATIC')


		SELECT BK.TaskID, MAX(BK.BookingID) As BookingID, FSD.FlowChartStepID
		into #T3
		from transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS BK
		INNER JOIN
		[transactionalData].[TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS] FSD ON
		BK.WOID= FSD.WOID  and Bk.BookingID=FSD.BookingID
		where BK.TaskID in (select TaskID from #T2)
		and FSD.FlowChartStepID in (select DISTINCT FlowChartStepID from #T2)
		and BK.WOID = #{wOID}
		and
		FSD.ExecutionType in ('AUTOMATIC')
		GROUP BY FSD.FlowChartStepID, BK.TaskID

		Select TaskID, BookingID, Reason, Status, Type
		into #T1
		from transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS
		where BookingID in (select BookingID from #T3)

		IF EXISTS(select 1 from #T1 where Status not in ('SKIPPED') and Reason
		not in ('SUCCESS') )
		BEGIN
		SELECT 1 AS 'Result'
		END
		ELSE
		BEGIN
		SELECT 0 AS 'Result'
		END-->
		
	DROP TABLE IF EXISTS #tempData
	DROP TABLE IF EXISTS #MaxBookingData

	select BK.woid,BK.TaskID, FSD.FlowChartStepID,
	BK.BookingID,BK.Reason,FSD.ExecutionType, BK.Status, BK.Type
	into #tempData
	from
	transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS BK
	INNER JOIN [transactionalData].[TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS] FSD
	ON BK.WOID= FSD.WOID and BK.TaskID= FSD.TaskID and
	Bk.BookingID=FSD.BookingID
	where FSD.ExecutionType in ('AUTOMATIC')
	and BK.WOID = #{wOID}

	select td.TaskID,td.FlowChartStepID,max(td.BookingID) BookingID
	into #MaxBookingData
	from #tempData TD
	join (select TaskID, FlowChartStepID, BookingID
	from #tempData td
	join refData.TBL_WORK_ORDER_FAILURE_REASON FS on td.Reason =
	FS.FailureReason
	Union
	select TaskID, FlowChartStepID, BookingID
	from #tempData td
	where Reason in ('FAIL:BOT Execution Fail')) b on td.TaskID = b.TaskID and
	td.FlowChartStepID = b.FlowChartStepID
	Group by td.TaskID,td.FlowChartStepID

	IF EXISTS(
	Select 1
	from #MaxBookingData MBD
	join #tempData td on MBD.BookingID = td.BookingID
	where
	Status not in ('SKIPPED')
	and Reason not in ('SUCCESS')
	)
	BEGIN
	SELECT 1 AS 'Result'
	END
	ELSE
	BEGIN
	SELECT 0 AS 'Result'
	End

	</select>


	<update id='updateWorkOrderUserLevel' statementType="CALLABLE"
		parameterType="WorkOrderModel">
		{call user_sp_updateWorkOrderUserLevel(
		#{workOrderModel.wOID,mode=IN, jdbcType=INTEGER},
		#{workOrderModel.lastModifiedBy,mode=IN, jdbcType=VARCHAR},
		#{workOrderModel.priority,mode=IN, jdbcType=VARCHAR},
		#{workOrderModel.listOfNode[0].nodeNames,mode=IN, jdbcType=VARCHAR},
		#{workOrderModel.listOfNode[0].nodeType,mode=IN, jdbcType=VARCHAR}
		)};
	</update>

	<select id='getEstdHrs' resultType="Integer">

		IF Exists(select
		AvgEstdEffort from refData.TBL_SUBACTIVITY where
		SubActivityID =
		#{subActivityID})
		Begin
		select AvgEstdEffort from
		refData.TBL_SUBACTIVITY where SubActivityID =
		#{subActivityID};
		End
		else
		Begin
		Select 0
		End

	</select>

	<select id='getParallelBotDetails' resultType="com.ericsson.isf.model.RpaModel">
		select distinct fsd.RpaID, ParallelWOExecution
		from [transactionalData].TBL_FLOWCHART_STEP_DETAILS fsd
		join [transactionalData].[TBL_RPA_DeployedBOT] bot on fsd.RpaID = bot.BOTID and bot.isActive = 1
		where  
		fsd.SubActivityFlowChartDefID =
		#{subActivityFlowChartDefID}  
		and fsd.ExecutionType ='Automatic'
		and fsd.StepID = #{stepID} and
		fsd.taskid = #{taskid} and fsd.active =1
	</select>

	<select id='getRpaDetails' resultType="String">
		select ParallelWOExecution
		from [transactionalData].[TBL_RPA_DeployedBOT]
		where BOTID = #{rpaId}
	</select>

	<!-- <resultMap type="AdhocWorkOrderCreationModel" id="AdhocWorkOrderCreationModelResult"> 
		</resultMap> -->

	<select id='createAdhocWorkOrder' statementType="CALLABLE"
		parameterType="AdhocWorkOrderCreationModel">
		{call createAdhocWorkOrder (
		#{adhocWOModel.woName,mode=IN, jdbcType=VARCHAR},
		#{adhocWOModel.ProjectID,mode=IN, jdbcType=INTEGER},
		#{adhocWOModel.domainID,mode=IN, jdbcType=INTEGER},
		#{adhocWOModel.serviceAreaID,mode=IN, jdbcType=INTEGER},
		#{adhocWOModel.technologyID,mode=IN, jdbcType=INTEGER},
		#{adhocWOModel.subActivityID,mode=IN, jdbcType=INTEGER},
		#{adhocWOModel.startDate,mode=IN, jdbcType=DATE},
		#{adhocWOModel.startTime,mode=IN, jdbcType=TIME},
		#{endDate,mode=IN,
		jdbcType=DATE},
		#{adhocWOModel.estimatedEffort,mode=IN,
		jdbcType=FLOAT},
		#{adhocWOModel.assignedTO,mode=IN, jdbcType=VARCHAR},
		#{adhocWOModel.createdBy,mode=IN, jdbcType=VARCHAR},
		#{adhocWOModel.createdDate,mode=IN, jdbcType=DATE},
		#{adhocWOModel.nodes,mode=IN, jdbcType=VARCHAR},
		#{adhocWOModel.nodeType,mode=IN, jdbcType=VARCHAR},
		#{adhocWOModel.nodeNames,mode=IN, jdbcType=VARCHAR},
		#{adhocWOModel.priority,mode=IN, jdbcType=VARCHAR},
		#{adhocWOModel.wfVersion,mode=IN, jdbcType=INTEGER},
		#{adhocWOModel.scopeID,mode=IN, jdbcType=INTEGER}
		)};
	</select>

	<update id='saveClosureDetails_WO'
		parameterType='SaveClosureDetailsForWOModel'>
		UPDATE transactionalData.TBL_WORK_ORDER set
		Status='CLOSED',
		ClosedOn=dbo.GetDateIST(), ActualEndDate=dbo.GetDateIST(),
		DeliveryStatus=#{saveClosureDetailsObject.deliveryStatus},
		Reason=#{saveClosureDetailsObject.reason},
		StatusComment=#{saveClosureDetailsObject.statusComment},
		LastModifiedBy=#{saveClosureDetailsObject.lastModifiedBy},LastModifiedDate=dbo.GetDateIST()
		where WOID=#{saveClosureDetailsObject.wOID}
	</update>

	<select id='getProjectCreatorSignum' resultType="String">
		select
		prj.ProjectCreator from transactionalData.TBL_WORK_ORDER w
		Inner join
		transactionalData.TBL_WORK_ORDER_PLAN p on w.WOPlanID =
		p.WOPlanID
		Inner Join transactionalData.TBL_PROJECTS prj on p.ProjectID
		=prj.ProjectID
		where w.WOID=#{woid}
	</select>

	<insert id='saveClosureDetails_InsertDA'
		parameterType='SaveClosureDetailsForWOModel'>
		insert into
		transactionalData.TBL_WORK_ORDER_DELIVERY_ACCEPTANCE 
		(WOID,
		WOName,
		DeliveryStatus, 
		Reason,
		AcceptedOrRejectedBy,
		LastModifiedBy,
		LastModifiedDate ,
		CreatedBy , 
		CreatedDate)
		values
		(
		#{saveClosureDetailsObject.wOID},
		#{saveClosureDetailsObject.wOName},
		#{saveClosureDetailsObject.deliveryStatus},
		#{saveClosureDetailsObject.reason},
		#{saveClosureDetailsObject.acceptedOrRejectedBy},
	    #{saveClosureDetailsObject.lastModifiedBy},
		dbo.GetDateIST(),
		#{saveClosureDetailsObject.lastModifiedBy},
		dbo.GetDateIST()
		)
	</insert>

	<resultMap type='WOWorkFlowModel' id='WOWorkFlowModelResult'>
		<result property='subActivityDefID'
			column='SubActivityFlowChartDefID' />
		<result property='version' column='VersionNumber' />
		<result property='flowChartJSON' column='FlowChartJSON' />
		<result property='workFlowName' column='WorkFlowName' />
		<result property='workFlowAutoSenseEnabled' column='isAutoSenseEnable'/>
		<result property='multiview' column='Multiview'/>
		<result property='status' column='Status'/>
		<result property='actualStartDate' column='ActualStartDate'/>	
	</resultMap>

	<select id='getWoWfVersionNo' resultType="Integer">
		select
		ISNULL(WorkFlowVersion,0) as VersionNumber from
		transactionalData.TBL_WORK_ORDER where WOID = #{woID}
	</select>

	<select id='getWOWorkFlow' resultMap="WOWorkFlowModelResult">

		IF EXISTS(select 1 from
		transactionalData.TBL_WORK_ORDER_FLOWCHART_DETAILS where
		SubActivityFlowChartDefID is not null and WOID = #{wOID} and active=1)
		Begin
		select top 1
		sfd.SubActivityFlowChartDefID,sfd.FlowChartJSON,sfd.VersionNumber,sfd.WorkFlowName,sfd.isAutoSenseEnable as workFlowAutoSenseEnabled,sfd.Multiview from
		transactionalData.TBL_SUBACTIVITY_FLOWCHART_DEF sfd
		inner join
		transactionalData.TBL_WORK_ORDER_FLOWCHART_DETAILS wfd on
		sfd.SubActivityFlowChartDefID = wfd.SubActivityFlowChartDefID
		where
		WOID = #{wOID}
		and sfd.Active = 1 and Type='CUSTOM'
		and
		sfd.FlowchartJSON is not NULL
		order by sfd.SubActivityFlowChartDefID
		desc
		End
		Else
		Begin
		IF Exists (select 1 from
		transactionalData.TBL_WORK_ORDER where WOID =
		#{wOID})
		Begin
		select
		sfd.SubActivityFlowChartDefID,sfd.FlowChartJSON,sfd.VersionNumber,sfd.WorkFlowName,sfd.isAutoSenseEnable as workFlowAutoSenseEnabled,wo.isAutoSenseEnable as workOrderAutoSenseEnabled,
		sfd.Multiview, wo.Status, wo.ActualStartDate
		from
		transactionalData.TBL_SUBACTIVITY_FLOWCHART_DEF sfd

		inner join
		transactionalData.TBL_WORK_ORDER wo on wo.flowchartdefid =
		sfd.SubActivityFlowChartDefID
		where wo.WOID = #{wOID}
		and sfd.Active = 1
		and sfd.Type in
		('PROJECTDEFINED','PROJECTDEFINED_EXPERT')
		and
		sfd.FlowchartJSON is not NULL
		End
		End
	</select>

	<select id='getWOWorkFlowWithWFNo'
		resultMap="WOWorkFlowModelResult">

		IF EXISTS(select 1 from
		transactionalData.TBL_WORK_ORDER_FLOWCHART_DETAILS where
		SubActivityFlowChartDefID is not null and WOID = #{wOID} and active=1)
		Begin
		select top 1
		sfd.SubActivityFlowChartDefID,sfd.FlowChartJSON,sfd.VersionNumber,sfd.WorkFlowName,sfd.isAutoSenseEnable as workFlowAutoSenseEnabled,sfd.Multiview from
		transactionalData.TBL_SUBACTIVITY_FLOWCHART_DEF sfd
		inner join
		transactionalData.TBL_WORK_ORDER_FLOWCHART_DETAILS wfd on
		sfd.SubActivityFlowChartDefID = wfd.SubActivityFlowChartDefID
		where
		WOID = #{wOID}
		and sfd.versionNumber =#{wfVersionNo} and
		sfd.Type='CUSTOM'
		and sfd.FlowchartJSON is not NULL
		order by
		sfd.SubActivityFlowChartDefID desc
		End
		Else
		Begin
		IF Exists (select 1 from
		transactionalData.TBL_WORK_ORDER where WOID =
		#{wOID} and WOPlanID is
		not null)
		Begin
		select top 1
		sfd.SubActivityFlowChartDefID,sfd.FlowChartJSON,sfd.VersionNumber,sfd.WorkFlowName,sfd.isAutoSenseEnable as workFlowAutoSenseEnabled,wo.isAutoSenseEnable as workOrderAutoSenseEnabled,
		sfd.Multiview, wo.Status, wo.ActualStartDate 
		from
		transactionalData.TBL_SUBACTIVITY_FLOWCHART_DEF sfd
		inner join
		transactionalData.TBL_WORK_ORDER_PLAN wop on wop.ProjectID =
		sfd.ProjectID
		inner join transactionalData.TBL_WORK_ORDER wo on
		wo.WOPlanID =
		wop.WOPlanID
		and wo.SubActivityID = sfd.SubActivityID
		and
		wo.flowchartdefid=sfd.SubActivityFlowChartDefID
		where wo.WOID = #{wOID}
		and sfd.versionNumber =#{wfVersionNo} and sfd.Type in
		('PROJECTDEFINED','PROJECTDEFINED_EXPERT','CUSTOM')
		and
		sfd.FlowchartJSON is not NULL
		order by sfd.SubActivityFlowChartDefID
		desc
		End
		End
	</select>

	<resultMap type='WorkFlowBookingDetailsModel'
		id='WorkFlowBookingDetailsModelResult'>
		<result property='wOID' column='WOID' />
		<result property='taskID' column='TaskID' />
		<result property='effort' column='Effort' />
		<result property='bookingID' column='BookingID' />
		<result property='status' column='Status' />
		<result property='outputLink' column='OutputLink' />
		<result property='reason' column='Reason' />
		<result property='type' column='Type' />
		<result property='stepID' column='FlowChartStepID' />
		<result property='executionType' column='ExecutionType' />
	</resultMap>

	<select id='getBookingHours'
		resultMap="WorkFlowBookingDetailsModelResult">
		select a1.*, a2.Status,a2.OutputLink
		from
		(
		select WOID, TaskID, (case
		when SUM(Hours) >= 1 then CAST(CAST(SUM(Hours) as
		DECIMAL(10,1)) as
		varchar(12)) + ' hrs'
		when SUM(Hours) * 60 >= 1 then
		CAST(CAST((SUM(Hours) * 60) as
		DECIMAL(10,1)) as varchar(12)) + '
		minutes'
		else CAST(CAST((SUM(Hours) * 60 * 60) as DECIMAL(10,1)) as
		varchar(12)) +
		' seconds' end) as Effort, max(BookingID) as BookingID
		from transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS
		where woid =
		#{wOID} and Type not in ('LEADTIME')
		<!--and Hours is not null -->
		group by WOID, TaskID
		) as a1
		inner join
		(
		select * from
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS
		where woid = #{wOID}
		)
		as a2 on a1.BookingID = a2.BookingID
	</select>

	<select id='updateStatusAndHours'
		resultMap='WorkOrderBookingDetailsModelResult'
		statementType="CALLABLE">
		{call user_sp_updateWorkOrderBookingDetails (
		#{wOID,mode=IN, jdbcType=INTEGER},
		#{taskID,mode=IN,jdbcType=INTEGER},
		#{bookingID,mode=IN,jdbcType=INTEGER},
		#{status,mode=IN,jdbcType=VARCHAR},
		#{reason,mode=IN,jdbcType=VARCHAR},
		#{signumID,mode=IN,jdbcType=VARCHAR},
		#{stepid,mode=IN,jdbcType=VARCHAR},
		#{sourceID,mode=IN,jdbcType=INTEGER},
		#{defID,mode=IN,jdbcType=INTEGER},
		#{executionType,mode=IN,jdbcType=VARCHAR}
		)};
	</select>


	<delete id='deleteExistingNodes'>
		DELETE FROM TRANSACTIONALDATA.TBL_WORK_ORDER_NODES
		WHERE WOID=#{woID}
	</delete>
	<delete id='deleteExistingNodesFromPlanNodes'>
		DELETE FROM
		TRANSACTIONALDATA.TBL_WORK_ORDER_PLAN_NODES WHERE
		WOPlanID=#{wOPlanID}
	</delete>

	<insert id='insertWorkOrderNode'>
		INSERT INTO TRANSACTIONALDATA.TBL_WORK_ORDER_NODES
		(WOID,NODETYPE,NODENAMES,CREATEDBY,CREATEDDATE,LASTMODIFIEDBY,LASTMODIFIEDDATE)
		VALUES(#{woID},#{nodeType},#{nodeNames},#{createdBy},dbo.GetDateIST(),#{createdBy},dbo.GetDateIST())
	</insert>

	<insert id='insertWorkOrderNodeInPlanNodes'>
		INSERT INTO
		TRANSACTIONALDATA.TBL_WORK_ORDER_PLAN_NODES
		(WOPlanID,NodeType,NodeNames,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate)
		VALUES(#{wOPlanID},#{nodeType},#{nodeNames},#{createdBy},dbo.GetDateIST(),#{createdBy},dbo.GetDateIST())
	</insert>

	<select id='getWoPlanID' resultType="Integer">
		select WOPlanID from
		transactionalData.tbl_work_order where WOID= #{woID}
	</select>

	<resultMap type='WorkOrderViewDetailsByWOIDModel'
		id='WorkOrderViewDetailsByWOIDModelResult'>
		<result property='wOID' column='WOID' />
		<result property='status' column='Status' />
		<result property='plannedStartDate' column='PlannedStartDate' />
		<result property='plannedEndDate' column='PlannedEndDate' />
		<result property='priority' column='Priority' />
		<result property='signumID' column='SignumID' />
		<result property='createdBy' column='CreatedBy' />
		<result property='wOName' column='WOName' />
		<result property='wOPlanSignumID' column='WOPlanSignumID' />
		<result property='projectID' column='ProjectID' />
		<result property='projectName' column='ProjectName' />
		<result property='projectType' column='ProjectType' />
		<result property='project_StartDate' column='Project_StartDate' />
		<result property='project_EndDate' column='Project_EndDate' />
		<result property='activity' column='Activity' />
		<result property='subActivity' column='SubActivity' />
		<result property='productArea' column='ProductArea' />
		<result property='marketArea' column='MarketArea' />
		<result property='country' column='Country' />
		<result property='operator' column='Operator' />
		<result property='createdDate' column='CreatedDate' />
		<result property='actualStartDate' column='ActualStartDate' />
		<result property='actualEndDate' column='ActualEndDate' />
		<result property='scopeID' column='ScopeID' />
		<result property='scopeName' column='ScopeName' />
		<result property='subActivityID' column='SubActivityID' />
		<result property='domain' column='Domain' />
		<result property='subDomain' column='SubDomain' />
		<result property='technology' column='Technology' />
		<result property='subServiceArea' column='SubServiceArea' />
		<result property='serviceArea' column='ServiceArea' />
		<result property='automatedHours' column='AutomatedHours' />
		<result property='manualHours' column='ManualHours' />
		<result property='totalHours' column='TotalHours' />
		<result property='nodeNames' column='NodeNames' />
		<result property='nodeCount' column='NodeCount' />
		<result property='nodeType' column='NodeType' />
		<result property='wFName' column='WorkFlowName' />
		<result property='flowchartdefid' column='flowchartdefid' />


	</resultMap>

	<select id='getWorkOrderViewDetailsByWOID'
		resultMap='WorkOrderViewDetailsByWOIDModelResult'
		statementType="CALLABLE">
		{call user_sp_getWorkOrderViewDetailsByWOID (
		#{WOID,mode=IN, jdbcType=VARCHAR}
		)};

	</select>


	<resultMap type='LastStepDetailsModel'
		id='LastStepDetailsModelResult'>
		<result property='woID' column='WOID' />
		<result property='taskID' column='DependentTaskID' />
		<result property='lastStep' column='isLastStep' />
		<collection property='taskList' ofType='java.lang.String'>
			<result column='TaskList'></result>
		</collection>
	</resultMap>

	<select id='checkIFPreviousStepCompleted' resultType='boolean'>
	if Exists(select 1
	<!--distinct t1.FlowchartSourceID as ChildID, t2.FlowchartSourceID as ParentID -->
	from
	transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_LINK_DETAILS t1
	LEFT JOIN transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_LINK_DETAILS t2
	ON t1.SubActivityFlowChartDefID = t2.SubActivityFlowChartDefID and
	t2.FlowchartTargetID = t1.FlowchartSourceID
	where t2.FlowchartSourceID is null
	and t1.SubActivityFlowChartDefID =#{flowChartDefID} and
	t1.FlowchartTargetID =#{flowChartStepID}
	)
	Select 1 as 'RESULT'
	Else If Exists(select 1
	<!--distinct t1.FlowchartSourceID as ChildID, t2.FlowchartSourceID as ParentID -->
	from
	transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_LINK_DETAILS t1
	LEFT JOIN transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_LINK_DETAILS t2
	ON t1.SubActivityFlowChartDefID = t2.SubActivityFlowChartDefID and
	t2.FlowchartTargetID = t1.FlowchartSourceID
	inner join transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS fsd on
	fsd.FlowChartStepID =t1.FlowchartSourceID and fsd.flowchartDefID =
	t1.SubActivityFlowChartDefID
	where
	t1.SubActivityFlowChartDefID =#{flowChartDefID} and
	t1.FlowchartTargetID =#{flowChartStepID}
	and fsd.woid =#{woID}
	)
	Select 1 as 'RESULT'
	Else
	Select 0 as 'RESULT'

</select>

	<select id='checkIfParentBooked' resultType='boolean'>
		IF EXISTS(select 1 from
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS
		where
		WOID =#{woID} and flowchartDefID =#{subActivityDefID} and
		flowchartStepID in (${parentID}))
		BEGIN
		Select 1 as 'RESULT'
		END
		ELSE
		BEGIN
		Select 0 as 'RESULT'
		END
		
	</select>

	<select id="checkIFPreviousStepCompletedV2" resultType="Boolean">

		SET
		TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

		IF EXISTS (
		select 1 from
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS where
		FlowChartStepID in(
		select stepID from
		transactionalData.TBL_FLOWCHART_STEP_DETAILS where StepID
		in(
		select
		distinct FlowchartSourceID from
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_LINK_DETAILS
		where
		FlowchartTargetID = #{flowChartStepID}))
		and WOID =#{woID}
		and
		FlowChartDefID = #{flowChartDefID}
		)
		BEGIN
		select 1
		END
		ELSE
		BEGIN
		select 0
		END

	</select>


	<select id='checkIFLastStep'
		resultMap="LastStepDetailsModelResult">
		{call user_sp_checkIfLastStep (
		#{flowChartDefID ,mode=IN,
		jdbcType=INTEGER},
		#{woID,mode=IN, jdbcType=INTEGER})};
	</select>

	<resultMap type='WorkOrderFailureReasonModel'
		id='WorkOrderFailureReasonModelResult'>
		<result property='failureReason' column='FailureReason' />
		<result property='failureCategory' column='FailureCategory' />
	</resultMap>

	<select id='getWOFailureReasons'
		resultMap='WorkOrderFailureReasonModelResult'>
		select FailureReason,FailureCategory from refData.TBL_WORK_ORDER_FAILURE_REASON where
		FailureCategory
		=#{category} order by FailureReason
	</select>

	<select id='checkForType' resultType="Boolean">
		IF EXISTS(SELECT 1 FROM
		TRANSACTIONALDATA.TBL_WORK_ORDER_BOOKING_DETAILS
		WHERE WOID=#{wOID} and
		TaskID=#{taskID} and BOOKINGID=#{bookingID} and
		Type='LEADTIME')
		select
		1
		else
		select 0
	</select>

	<select id='startWO' resultType="Integer">
		update
		transactionalData.TBL_WORK_ORDER set Status='INPROGRESS',
		LastModifiedBy=#{signumID}, LastModifiedDate=dbo.GetDateIST() where WOID =
		#{wOID}
	</select>

	<select id='startWO_bookingDetails' resultType="String">

		insert into
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS (WOID, TaskID,
		StartDate, Type, Status, SignumID)
		values (#{wOID}, #{taskID},
		convert(varchar(25), dbo.GetDateIST(), 120), 'BOOKING',
		'STARTED',
		#{signumID})
	</select>

	<select id='getMaxBookingID' resultType="String">

		select max(BookingID)
		from transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS
		where WOID =
		#{wOID} and taskID=#{taskID} and signumID=#{signumID} and
		Type not
		in('LEADTIME')
		

	</select>

	<select id='getMaxBookingIdByWoid' resultType="Integer">

		<!--select
		max(BookingID) from transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS
		where WOID = #{wOID} and signumID=#{signumID} and Type not
		in('LEADTIME')-->
		
		
	    Select max(BookingID) from transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS with (index(nci_reasondetails))
		where WOID = #{wOID} and signumID=#{signumID} and Type not in('LEADTIME')

	</select>

	<update id='updateWOBooking'>
		update
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS set
		Status=#{bookingStatus} ,	ModifiedBy =#{signumID}, ModifiedDate= dbo.GetDateIST() 
		where WOID = #{wOID} and TaskID = #{taskID} and
		SignumID =#{signumID} and
		Type ='BOOKING'
	</update>

	<select id='closeWO_bookingID'>
		update
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS set
		EndDate=convert(varchar(25), dbo.GetDateIST(), 120), Status='COMPLETED',
		SignumID=#{signumID},Reason = #{status},
		Hours = DATEDIFF(ss,
		StartDate, dbo.GetDateIST())/3600.0, OutputLink= #{url} where
		BookingID=#{bookingID}

	</select>


	<update id='updateRpaFailureStatus'>
		update
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS set Reason =
		#{serverBotModel.reason},SignumID=#{serverBotModel.signumID},
		OutputLink= #{serverBotModel.outputLink},
		ModifiedBy = #{serverBotModel.signumID},
        ModifiedDate = dbo.GetDateIST()
		where BookingID=#{bookingID}
		and WOID = #{wOID} and TaskID = #{taskID}
	</update>

	<!-- <select id='closeWO_wOID' resultType="Integer"> update transactionalData.TBL_WORK_ORDER 
		set Status='CLOSED', LastModifiedBy=#{signumID} where WOID=#{wOID} </select> -->

	<select id='getAdhocWorkOrderForRPA' resultType='Integer'>
		select * from
		transactionalData.TBL_WORK_ORDER
		where adhocWOID = (select
		max(AdhocWOID)
		from transactionalData.TBL_ADHOC_WORK_ORDER
		where
		AssignedTO = #{rpaID}
		)
		and SignumID=#{rpaID}

	</select>

	<resultMap type='WorkFlowStepDetailsModel'
		id='WorkFlowStepDetailsModelResult'>
		<result property='woID' column='WOID' />
		<result property='taskID' column='TaskID' />
		<result property='stepID' column='FlowChartStepID' />
		<result property='flowchartDefID' column='flowchartDefID' />
		<result property='status' column='Status' />
		<result property='signumID' column='SignumID' />
		<result property='decisionValue' column='DecisionValue' />
		<result property='bookingID' column='FCBookingID' />
		<collection property='lstBooking'
			ofType="WorkFlowBookingDetailsModel">
			<result property='wOID' column='WOID' />
			<result property='taskID' column='TaskID' />
			<result property='effort' column='Effort' />
			<result property='bookingID' column='BookingID' />
			<result property='status' column='BookingStatus' />
			<result property='outputLink' column='OutputLink' />
		</collection>
	</resultMap>

	<insert id='addStepDetailsForFlowChart'>
	IF EXISTS (Select 1 from
	transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS where WOID =
	#{stepDetailsModel.woId} and taskID = #{stepDetailsModel.taskID} and
	bookingID = #{stepDetailsModel.bookingId} and
	flowChartStepID = #{stepDetailsModel.flowChartStepId} and flowChartDefID =
	#{stepDetailsModel.flowChartDefID})
	BEGIN
	Update transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS
	set status = #{stepDetailsModel.status},ExecutionType
	=#{stepDetailsModel.executionType}, bookedOn =
	dbo.GetDateIST(),decisionValue =#{stepDetailsModel.decisionValue},
	ModifiedBy =#{stepDetailsModel.signumId} ,ModifiedDate
	=dbo.GetDateIST()
	where WOID = #{stepDetailsModel.woId} and
	taskID = #{stepDetailsModel.taskID}
	and bookingID = #{stepDetailsModel.bookingId} and flowChartStepID =
	#{stepDetailsModel.flowChartStepId} and
	flowChartDefID = #{stepDetailsModel.flowChartDefID}
	END
	ELSE
	BEGIN
	insert into
	transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS
	(WOID,FlowChartDefID,FlowChartStepID,TaskID,BookingID,Status,DecisionValue,SignumID,BookedOn,ExecutionType,
	CreatedBy , CreatedDate , ModifiedBy ,ModifiedDate)
	Values(#{stepDetailsModel.woId},#{stepDetailsModel.flowChartDefID},#{stepDetailsModel.flowChartStepId},#{stepDetailsModel.taskID},#{stepDetailsModel.bookingId},#{stepDetailsModel.status},#{stepDetailsModel.decisionValue},#{stepDetailsModel.signumId},dbo.GetDateIST(),#{stepDetailsModel.executionType},#{stepDetailsModel.signumId},dbo.GetDateIST(),#{stepDetailsModel.signumId},dbo.GetDateIST())
	END
</insert>
<!-- v1/addStepDetailsForFlowChart  -->
<insert id='addStepDetailsForFlowChartV1'>
		IF EXISTS (Select 1 from
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS where WOID =
		#{wOID} and taskID = #{taskID} and bookingID = #{bookingID} and
		flowChartStepID = #{stepID} and flowChartDefID = #{flowChartDefID})
		BEGIN
		Update transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS
		set status = #{status},ExecutionType =#{exeType}, bookedOn =
		dbo.GetDateIST(),decisionValue =#{decisionValue}, ModifiedBy =#{signumID} ,ModifiedDate =dbo.GetDateIST()
		where WOID = #{wOID} and
		taskID = #{taskID}
		and bookingID = #{bookingID} and flowChartStepID =
		#{stepID} and
		flowChartDefID = #{flowChartDefID}
		END
		ELSE
		BEGIN
		insert into
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS
		(WOID,FlowChartDefID,FlowChartStepID,TaskID,BookingID,Status,DecisionValue,SignumID,BookedOn,ExecutionType, CreatedBy , CreatedDate , ModifiedBy ,ModifiedDate)
		Values(#{wOID},#{flowChartDefID},#{stepID},#{taskID},#{bookingID},#{status},#{decisionValue},#{signumID},dbo.GetDateIST(),#{exeType},#{signumID},dbo.GetDateIST(),#{signumID},dbo.GetDateIST())
		END
	</insert>
	
	
	<!-- <select id='getWorkFlowStepBookingDetails'
		resultType='java.util.LinkedHashMap'>
		SET
		TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
		;With
		WOBS(WOID,TaskID,BookingID,FlowChartDefID,FlowChartStepID,DecisionValue)
		as
		(select WOID,TaskID,MAX(BookingID) as
		BookingID,FlowChartDefID,FlowChartStepID,'NA' as DecisionValue
		from
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS Where WOID =
		#{wOID}
		group by WOID,TaskID,FlowChartDefID,FlowChartStepID)
		select
		BOK.WOID,BOK.TaskID,BOK.BookingID,WOBS.FlowChartDefID,WOBS.FlowChartStepID,
		WOBS.DecisionValue,BOK.Status,BOK.OutputLink,BOK.Reason,BOK.type,
		BOK.Hours
		from WOBS inner join
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS BOK
		ON BOK.WOID =
		WOBS.WOID
		AND BOK.BookingID =WOBS.BookingID
		Where BOK.WOID = #{wOID}
	</select> -->
	
	<select id='getWorkFlowStepBookingDetails'
	resultType='com.ericsson.isf.model.WorkFlowStepBookingDetailsModel'>
		declare
		@woID int = #{wOID};
		
		Drop table if exists #BookingData
		SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
		;With
		WOBS(WOID,TaskID,BookingID,FlowChartDefID,FlowChartStepID,ProficiencyID,StepType,DecisionValue)
		as
		(
		select
		WOID,
		WOFCStep.TaskID,
		MAX(BookingID) as
		BookingID,
		FlowChartDefID,
		FlowChartStepID,
		FCStep.ProficiencyID,
		FCStep.StepType,
		DecisionValue
		from
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS WOFCStep
		Left Join transactionalData.TBL_FLOWCHART_STEP_DETAILS FCStep
		On WOFCStep.FlowChartDefID = FCStep.SubActivityFlowChartDefID
		and WOFCStep.FlowChartStepID = FCStep.StepID
		and FCStep.Active = 1
		Where WOID =@woID
		group by WOID,WOFCStep.TaskID,FlowChartDefID,FlowChartStepID, FCStep.ProficiencyID,
		FCStep.StepType,DecisionValue
		)
		
		select
		wobs.WOID,
		wobs.TaskID,
		wobs.BookingID,
		WOBS.FlowChartDefID,
		WOBS.FlowChartStepID,
		WOBS.ProficiencyID,
		WOBS.StepType,
		case when WOBS.DecisionValue=' ''''' then 'NA' else WOBS.DecisionValue end DecisionValue,
		bok.StartDate,bok.EndDate,bok.Hours,bok.ParentBookingDetailsID,bok.type,bok.Status,bok.SignumID,
		bok.Reason,bok.OutputLink,bok.parallelcount,bok.referenceid
		into #BookingData
		from WOBS
		left join transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS BOK ON BOK.WOID
		=WOBS.WOID AND BOK.BookingID =WOBS.BookingID
		Where wobs.WOID =@woID
		Drop table if exists #EffortsData
		select
		ISNULL((case when SUM(bk.Hours) >= 1 then CAST(CAST(SUM(bk.Hours) as DECIMAL(10,4))
		as varchar(12)) + ' hrs' when SUM(bk.Hours) * 60 >= 1 then
		CAST(CAST((SUM(bk.Hours) * 60) as DECIMAL(10,4)) as varchar(12)) + ' minutes'
		else CAST(CAST((SUM(bk.Hours) * 60 * 60) as DECIMAL(10,2)) as varchar(12))
		+ ' seconds' end),0) as Effort,
		fs.woid,
		fs.FlowChartStepID
		into #EffortsData
		from transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS fs
		left Join transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS bk on
		fs.BookingID = bk.BookingID
		inner join #BookingData BD on BD.WOID = fs.woid and bd.FlowChartStepID = fs.FlowChartStepID
		Where bk.Type not in ('LEADTIME')
		group by fs.woid,fs.FlowChartStepID
		;
		select Effort,BD.*
		from #BookingData BD
		left join #EffortsData ED on BD.WOID = ed.WOID and bd.FlowChartStepID = ed.FlowChartStepID
</select>

	<select id='getWorkFlowStepDecisionValue'
		resultType='java.util.LinkedHashMap'>
		select distinct
		WOID,FlowChartDefID,FlowChartStepID,DecisionValue
		from
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS
		where WOID =
		#{wOID}
	</select>

	<select id='getWFStepData' resultType='com.ericsson.isf.model.WorkFlowStepDataModel'>
		select distinct
		FS.ToolID,TL.Tool as ToolName,FS.outputUpload
		<if test="executionType =='Automatic'">		
		,ISNULL(FS.RpaID,0) as RpaID,
		ISNULL(db.BOTName,'RPA') as RpaName , db.isRunOnServer,
		db.isInputRequired,db.BOTLanguage as BotType
		</if>
		from transactionalData.TBL_FLOWCHART_STEP_DETAILS FS
		Inner Join refData.TBL_TOOL_INVENTORY TL on FS.ToolID = TL.ToolID
		<if test="executionType =='Automatic'">
		Left
		Join transactionalData.TBL_RPA_DeployedBOT db on ISNULL(FS.RpaID,0) =
		db.rpaRequestID
		</if>
		where FS.SubActivityFlowChartDefID=#{defID} and
		FS.StepID = #{stepID}
		and FS.ExecutionType= #{executionType}
		and FS.Active = 1
	</select>

	<select id='getDecisionValueForStep' resultType='String'>
		select top 1
		DecisionValue from
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS
		where
		FlowChartStepID =#{stepID} and WOID =#{woID}
		order by BookedOn desc
	</select>

	<select id='getWfVersionDetails' resultType="java.util.Map">
		select
		Cast(w.WorkFlowVersion as varchar(100)) as WorkFlowVersion,
		Cast(def.SubActivityFlowChartDefID as varchar(100)) as
		SubActivityFlowChartDefID
		from transactionalData.TBL_WORK_ORDER w
		Inner
		Join transactionalData.TBL_WORK_ORDER_PLAN p on w.WOPlanID=p.WOPlanID
		Inner Join transactionalData.TBL_SUBACTIVITY_FLOWCHART_DEF def on
		p.ProjectID =def.ProjectID and
		w.subActivityID = def.subActivityID and
		w.WorkFlowVersion = def.VersionNumber
		and
		w.flowchartdefid=def.SubActivityFlowChartDefID
		where w.WOID = #{wOID}
		and def.FlowChartJSON is not NULL
	</select>


	<select id='getWorkOrderDetails' resultType='Integer'>
		Select
		ISNULL((select WOID from
		transactionalData.TBL_WORK_ORDER_FLOWCHART_DETAILS
		where
		SubActivityFlowChartDefID=#{flowchartDefID} and CreatedBy
		=#{signumID}),0) as WOID
	</select>

	<update id='updateWorkFlowVersion'>
		update transactionalData.TBL_WORK_ORDER set
		WorkFlowVersion=#{version},flowchartdefid =
		#{subActivityFlowChartDefID}
		where WOID=#{woID} and SignumID
		=#{signumID}
	</update>

	<select id='getWorkOrderData' resultType="java.util.Map">
		select Cast(p.ProjectID
		as varchar(100)) as ProjectID,s.SubActivity from
		transactionalData.TBL_WORK_ORDER w
		Inner Join
		transactionalData.TBL_WORK_ORDER_PLAN p on w.WOPlanID=p.WOPlanID
		Inner
		Join refData.TBL_SUBACTIVITY s on
		s.SubActivityID=w.SubActivityID and
		s.Active=1
		where w.WOID=#{woID} and w.Active=1 and p.Active=1
	</select>

	<insert id='updateRPABotStatus'>
		insert into
		transactionalData.TBL_WORK_ORDER_RPA_EXECUTION_LOG
		(WoID,TaskID,BookingID,SignumID,Status,BookedOn,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		Values
		(#{woID},#{taskID},#{bookingID},#{signumID},#{status},dbo.GetDateIST(),#{signumID},dbo.GetDateIST(),#{signumID},dbo.GetDateIST())
	</insert>

	<select id='getEmployeeEmail' resultType='String'>
		select EmployeeEmailID
		from refData.TBL_EMPLOYEES where signum =#{signumID}
	</select>

	<select id='getFlowChartStepID' resultType='String'>
		select
		FlowChartStepID from
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS
		where WOID =
		#{woID} and FlowChartDefID = #{flowchartDefID}
		and TaskID = #{taskID}
		and BookingID = #{bookingID} and SignumID
		=#{signumID}
	</select>

	<select id='getFlowChartStepIDByBooking' resultType='String'>
		select
		distinct FlowChartStepID from
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS
		where WOID =
		#{woID}
		and TaskID = #{taskID} and BookingID = #{bookingID} and
		SignumID
		=#{signumID}
	</select>


	<select id='getFlowChartStepByStepId' resultType='Integer'>
		select top 1
		WOfcstepdetailsid from
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS WITH (NOLOCK)
		where WOID =
		#{woId} and FlowChartstepid = #{flowChartStepId}
	</select>

	<select id='getStepDetailsByStepIdAndFcDefId'
		resultType='com.ericsson.isf.model.WorkflowStepDetailModel'>
		select * from transactionalData.TBL_FLOWCHART_STEP_DETAILS
		where stepid=#{stepID} and SubActivityFlowChartDefID=#{fcDefId}
	</select>


	<select id='getStepDetailsByStepId'
		resultType='com.ericsson.isf.model.StepDetailsModel'>
		select top 1 BookingID,Status from
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS
		where WOID =
		#{woId} and FlowChartstepid = #{flowChartStepId} order by
		bookingid
		desc
	</select>

	<select id='getBookingHoursForStep' resultType='String'>
		SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
select
ISNULL((case when SUM(Hours) >= 1 then CAST(CAST(SUM(Hours) as
DECIMAL(10,4)) as varchar(12)) + ' hrs'
when SUM(Hours) * 60 >= 1 then
CAST(CAST((SUM(Hours) * 60) as
DECIMAL(10,4)) as varchar(12)) + '
minutes'
else CAST(CAST((SUM(Hours) * 60 * 60) as DECIMAL(10,2)) as
varchar(12)) +
' seconds' end),0) as Effort
from
transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS fs
Inner Join
transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS bk on
fs.BookingID =
bk.BookingID
where fs.FlowChartStepID=#{stepID} and fs.woid=#{woID} and
bk.Type not in
('LEADTIME')
	</select>

	<select id='getBookingStatusOfPreviousStep'
		resultMap='WorkFlowStepDetailsModelResult'>
		select st.WOID,st.FlowChartDefID,st.FlowChartStepID,
		st.TaskID,st.bookingID as
		FCBookingID,st.Status,st.DecisionValue,st.SignumID,bk.BookingID,
		bk.TaskID,bk.Type,bk.Status as BookingStatus,bk.Hours as
		Effort,bk.OutputLink
		from
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS st
		inner Join
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS bk on bk.woid =
		st.WOID and
		bk.TaskID = st.TaskID and
		st.BookingID = bk.BookingID
		where
		st.WOID = #{stepDetailsModel.woId}
		and st.flowChartDefID = #{stepDetailsModel.flowChartDefID}
		and
		st.status not in ('COMPLETED')
	</select>
	<!-- v1/getBookingStatusOfPreviousStep -->
	<select id='getBookingStatusOfPreviousStepV1'
		resultMap='WorkFlowStepDetailsModelResult'>
		select st.WOID,st.FlowChartDefID,st.FlowChartStepID,
		st.TaskID,st.bookingID as
		FCBookingID,st.Status,st.DecisionValue,st.SignumID,bk.BookingID,
		bk.TaskID,bk.Type,bk.Status as BookingStatus,bk.Hours as
		Effort,bk.OutputLink
		from
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS st
		inner Join
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS bk on bk.woid =
		st.WOID and
		bk.TaskID = st.TaskID and
		st.BookingID = bk.BookingID
		where
		st.WOID = #{wOID}
		and st.flowChartDefID = #{flowChartDefID}
		and
		st.status not in ('COMPLETED')
	</select>

	<select id='getPreviousStepID' resultType='java.util.Map'>
		<!-- select ISNULL((select distinct MAX(FlowchartSourceID) from transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_LINK_DETAILS 
			where FlowchartTargetID =#{stepID} and SubActivityFlowChartDefID =#{flowChartDefID}),0) 
			as FlowchartSourceID -->
		select distinct top 1 cast(ISNULL((MAX(l.FlowchartSourceID)),0) as
		int) as FlowchartSourceID,ISNULL(( st.WOFCStepDetailsID),0) as
		WOFCStepDetailsID
		from
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_LINK_DETAILS l
		Inner
		Join transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS st on
		l.FlowchartSourceID = st.FlowChartStepID
		where l.FlowchartTargetID =
		#{stepID} and
		l.SubActivityFlowChartDefID=#{flowChartDefID} and st.WOID
		= #{wOID}
		group by l.FlowchartSourceID,st.WOFCStepDetailsID
	</select>

	<select id='getBookingIDOfPreviousStep' resultType='Integer'>
		Select
		ISNULL((select distinct MAX(BookingID) from
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS
		where
		FlowChartStepID = #{previousStepID} and WOID =#{wOID} and
		WOFCStepDetailsID = #{woFCID}
		and FlowChartDefID =#{flowChartDefID} and
		SignumID =#{signumID}),0) as
		BookingID
	</select>

	<update id='updateStepBookingStatus'>
		update
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS set Status
		=#{bookingStatus}, ModifiedBy =#{signumID} , ModifiedDate =dbo.GetDateIST()
		where WOID =#{wOID} and FlowChartStepID = #{stepID}
		and TaskID = #{taskID}
		and FlowChartDefID =#{flowChartDefID} and
		BookingID=#{bookingID} and
		SignumID =#{signumID}
	</update>

	<update id='checkAndUpdateStatusOfSameTask'>
		update
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS set Status
		='COMPLETED', ModifiedBy =#{signumID} , ModifiedDate =dbo.GetDateIST() 
		where WOID=#{wOID} and TaskID=#{taskID} and
		FlowChartStepID =#{stepID}
		and FlowChartDefID =#{flowChartDefID} and
		SignumID =#{signumID} and
		Status in ('ONHOLD')
	</update>

	<select id='getSubActivityIDForWOID' resultType="Integer">
		select
		SubActivityID from transactionalData.TBL_WORK_ORDER where WOID =
		#{wOID}
	</select>

	<select id='getWFLatestVersion' resultType="Integer">
		select VersionNumber
		from transactionalData.TBL_SUBACTIVITY_FLOWCHART_DEF
		where
		SubActivityFlowChartDefID = #{defID}
	</select>

	<select id='getLatestBookingID' resultType="Integer">

		select
		ISNULL(MAX(BookingID),0) as BookingID from
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS
		where WOID = #{wOID}
		and Type='BOOKING' and Status not in
		('COMPLETED','ONHOLD')

	</select>

	<select id='getLatestBookingIDNotCompleted' resultType="Integer">
		select
		ISNULL(MAX(BookingID),0) as BookingID from
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS
		where WOID = #{woID}
	</select>

	<update id='updateBookingStatus'>
		UPDATE
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS
		SET Status= #{status},
		EndDate=convert(varchar(25), dbo.GetDateIST(),
		120),SignumID=#{signumID},Reason = #{comment},
		Hours = DATEDIFF(ss,
		StartDate, dbo.GetDateIST())/3600.0,
		ModifiedBy = #{signumID},
        ModifiedDate = dbo.GetDateIST() 
		Where WOID = #{woID} AND BookingID
		=#{bookingID} and Status = 'STARTED'
	</update>

	<update id='updateWOFlowChartStepDetails'>
		UPDATE
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS
		SET Status=
		#{status}, BookedON = dbo.GetDateIST(),SignumID=#{signumID} , ModifiedBy =#{signumID} , ModifiedDate =dbo.GetDateIST() 
		Where WOID =
		#{woID} AND BookingID =#{bookingID}
		AND FlowChartStepID =
		#{flowChartStepID} AND FlowChartDefID
		=#{flowChartDefID}
		AND TaskID=
		#{taskID}
	</update>


	<select id='checkBookingStatus' resultType='Boolean'>
		IF EXISTS(select 1
		from transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS
		Where WOID
		=#{woID} AND BookingID =#{bookingID} AND Status ='STARTED')
		BEGIN
		Select 1 as 'Result'
		END
		ELSE
		BEGIN
		Select 0 as 'Result'
		END
	</select>

	<update id='updateBookingStatusInFlowChart'>
		UPDATE
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS
		SET Status=
		#{status}, BookedON = dbo.GetDateIST(),SignumID=#{signumID},ModifiedBy =#{signumID} , ModifiedDate =dbo.GetDateIST()
		Where WOID =
		#{woID} AND BookingID =#{bookingID} and Status = 'STARTED'
	</update>
	

	<resultMap type='UserWorkFlowProficencyModel'
	id='UserWorkFlowProficencyModelResult'>
	<result property='wfUserProficenctID'
	column='WFUserProficenctID' />
	<result property='projectID' column='ProjectID' />
	<result property='subActivityID' column='SubActivityID' />
	<result property='signumID' column='SignumID' />
	<!-- <result property='qualified' column='Qualified' /> -->
	<result property='wfId' column='WFID' />
	<result property='displayedMode' column='DisplayedMode' />
	<result property='workFlowName' column='WorkFlowName' />
	</resultMap>

	<insert id='saveUserWFProficency'
		parameterType="UserWorkFlowProficencyModel">
		INSERT INTO
		transactionalData.TBL_WORK_FLOW_USER_PROFICIENCY
		(ProjectID,SubActivityID,SignumID,DisplayedMode,
		CreatedBy,CreatedOn,LastModifiedBy,LastModifiedOn)
		VALUES(#{userWFProficency.projectID},#{userWFProficency.subActivityID},#{userWFProficency.signumID},
		#{userWFProficency.displayedMode},#{lgSignum},dbo.GetDateIST(),#{lgSignum},dbo.GetDateIST())
	</insert>

	<update id='updateUserWFProficency'
		parameterType="UserWorkFlowProficencyModel">
		UPDATE transactionalData.TBL_WORK_FLOW_USER_PROFICIENCY
		SET DisplayedMode = #{userWFProficency.displayedMode},LastModifiedBy
		=#{lgSignum},LastModifiedOn = dbo.GetDateIST()
		WHERE ProjectID =
		#{userWFProficency.projectID}
		AND SubActivityID =
		#{userWFProficency.subActivityID}
		AND SignumID =
		#{userWFProficency.signumID}
	</update>

	<select id='getUserWFProficency' resultType="java.util.Map">
        <![CDATA[
        SELECT CAST(DEF.VersionNumber as varchar(12)) as VersionNumber ,DEF.WorkFlowName 
        FROM transactionalData.TBL_SUBACTIVITY_FLOWCHART_DEF DEF 
        INNER JOIN transactionalData.TBL_WORK_FLOW_USER_PROFICIENCY WFUP ON DEF.ProjectID = WFUP.ProjectID
        AND DEF.SubActivityID = WFUP.SubActivityID 
        WHERE WFUP.SignumID = #{signumID}
        AND WFUP.ProjectID =#{projectID}
        AND WFUP.SubActivityID =#{subActivityID}
        AND  DEF.flowchartJSON is not null 
        AND  DEF.Type in ('PROJECTDEFINED','PROJECTDEFINED_EXPERT')
        AND  DEF.flowchartJSON <> '{"cells":[]}'
        AND  WFUP.DisplayedMode = 1
        ]]>
	</select>

	<update id='updateWorkOrderWFVersion'>
		UPDATE transactionalData.TBL_WORK_ORDER
		SET
		WorkFlowVersion = #{wfVersionNo},LastModifiedBy
		=#{signumID},LastModifiedDate = dbo.GetDateIST()
		WHERE WOID = #{woID}
		AND
		SignumID = #{signumID}
	</update>
	<resultMap type='com.ericsson.isf.model.WorkOrderProgressModel'
		id='WorkOrderProgressModelResult'>
		<result property='woID' column='WOID' />
		<result property='parentWOID' column='ParentWorkOrderID'></result>
		<result property='doid' column='DOID' />
		<result property='woName' column='WOName' />
		<result property='deliverablePlanName' column='ScopeName' />
		<result property='deliverableUnitName'
			column='DeliverableUnitName' />
		<result property='projectID' column='ProjectID' />
		<result property='subActivityID' column='SubActivityID' />
		<result property='status' column='Status' />
		<result property='priority' column='Priority' />
		<result property='woPriority' column='WoPriority' />
		<result property='workFlowName' column='WorkFlowName' />
		<result property='nodeType' column='NodeType' />
		<result property='nodeCount' column='NodeCount' />
		<result property='digitialHours' column='AutomatedHours' />
		<result property='manualHours' column='ManualHours' />
		<result property='totalHours' column='TotalHours' />
		<result property='plannedstartDate' column='PlannedStartDate' />
		<result property='plannedclosedOn' column='PlannedEndDate' />
		<result property='actualstartDate' column='ActualStartDate' />
		<result property='actualclosedOn' column='ActualEndDate' />
		<!-- <result property='nodeName' column='NodeName' /> -->
		<result property='flowChartDefID'
			column='SubActivityFlowChartDefID' />
		<result property='versionNumber' column='WorkFlowVersion' />
		<result property='qualified' column='DisplayedMode' />
		<result property='neRequired' column='NENeededForExecution' />
		<result property='flowChartType' column='Type' />
		<result property='wfid' column='wfid' />
		<result property='woPlanID' column='WOPlanID' />
		<result property='wFOwnerName' column='wfownername' />
		<result property='workOrderAutoSenseEnabled' column='IsAutoSenseEnable' />
		
		<!-- <result property='market' column='Market' /> -->
		<!-- <result property='nodeNames' column='NodeNames' /> -->
		<result property='progressDescription' column='ProgressDescription' />
		<!-- <result property="market" column="Market" /> -->
		
		<collection property='nodeName'
			ofType='java.lang.String'>
			<result property="nodeNames" column="NodeNames" />
		</collection>
		<collection property='market'
			ofType='java.lang.String'>
			<result property="market" column="Market" />
		</collection>
		
	</resultMap>
		
<!-- <select id='getWorkOrders' resultMap='WorkOrderProgressModelResult'>
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
;With WOBooking(WOID,AutomatedHours,ManualHours,StartDate) as
(
select
wb.WOID,
SUM(case when WOFS.ExecutionType in ('Automated','Automatic')then wb.Hours else 0 end) as AutomatedHours,
SUM(case when WOFS.ExecutionType is null or WOFS.ExecutionType not in ('Automated','Automatic') then wb.Hours else 0 end) as ManualHours,
max(StartDate) as startdate
from
transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS WOFS
INNER JOIN transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS wb on WOFS.WOID=wb.WOID and WOFS.BookingID = wb.BookingID
where wb.Type = 'BOOKING'and
wb.SignumID = #{signumID}
group by wb.WOID
)
select
distinct wo.DOID,
wcdef.wfid,
wo.woid,
wo.ParentWorkOrderID,
replace(wo.WOName,'''','') WOName ,
ps.ScopeName,
pdu.DeliverableUnitName,
wo.PROJECTID,
wo.priority AS WoPriority,
wo.SubActivityID,
case when wo.Status = 'ASSIGNED ' and prof.Qualified = 1 and wo.isAutoSenseEnable IS NULL then 'PROJECTDEFINED_EXPERT' else wcdef.Type end as type,
wo.Status,
wp.priority,
wcdef.WorkFlowName,
wo.WorkFlowVersion
,wo.ActualStartDate,
wo.ActualEndDate,
wcdef.SubActivityFlowChartDefID,
wo.PlannedStartDate,
wo.PlannedEndDate,
case when wo.isAutoSenseEnable IS NULL then prof.Qualified else case when wcdef.Type='PROJECTDEFINED_EXPERT' then 1 else 0 end end as Qualified,
wcdef.NENeededForExecution,
H.AutomatedHours,
H.ManualHours,H.AutomatedHours+ H.ManualHours TotalHours
,wo.SignumID,
h.StartDate,
wo.PlannedStartDate,
upper(concat(Emp.EmployeeName,'('+ wcdef.WFOwner+')'))as WFOwnerName,
wp.WOPlanID,
wo.IsAutoSenseEnable,
wonodes.nodetype,
replace(wonodes.NodeNames,',$','') NodeNames,
count(nodenames) over(partition by wo.woid) as NodeCount,
case when ne.Market is NULL or ne.Market = '' then '-' else replace(ne.Market,',$','') end as Market,
0.0 as CompletedPercentage,
'0 steps remaining out of total All' as ProgressDescription
from transactionalData.TBL_WORK_ORDER wo
inner join transactionalData.TBL_Deliverable_Order_ID doi on wo.DOID =doi.DOID
inner join transactionalData.TBL_WORK_ORDER_PLAN wp on wo.WOPlanID =wp.WOPlanID and wp.ProjectID = wo.PROJECTID
inner join transactionalData.TBL_PROJECTSCOPE ps on wp.ScopeID = ps.ProjectScopeID
inner join refData.TBL_Project_Deliverable_Unit pdu on ps.deliverableUnit = pdu.DeliverableUnitID
Inner join transactionalData.TBL_SUBACTIVITY_FLOWCHART_DEF wcdef on wcdef.ProjectID=wo.ProjectID and wcdef.SubActivityID = wo.SubActivityID and wcdef.VersionNumber = wo.WorkFlowVersion and wcdef.SubActivityFlowChartDefID=wo.flowchartdefid
inner join refData.TBL_SUBACTIVITY sub on wo.SubActivityID = sub.SubActivityID
left join refdata.tbl_employees EMP on EMP.Signum= wcdef.WFOwner
left join transactionalData.TBL_WORK_FLOW_USER_PROFICIENCY prof on prof.SubActivityID=wo.SubActivityID and prof.ProjectID=wo.PROJECTID and wcdef.ExpertViewNeeded = 1 AND PROF.SignumID =WO.SignumID and prof.WFID=wcdef.WFID
LEFT JOIN WOBooking as h on WO.WOID = h.WOID
Left join transactionalData.TBL_WORK_ORDER_NODES wonodes on wo.WOID = wonodes.woid
left join transactionalData.TBL_NETWORK_ELEMENT NE on NE.ProjectID=WO.ProjectID and NE.Name=wonodes.NodeNames and sub.TechnologyID=NE.TechnologyID and sub.DomainID=NE.DomainSubDomainID
where
wo.active=1 and wo.Status in (${status})
and wo.SignumID = #{signumID} <if test="startDate != null and endDate != null">
and wo.PlannedStartDate between #{startDate} and #{endDate}
</if>
order by h.StartDate desc, wo.PlannedStartDate desc


</select> -->

<select id='getWorkOrders' resultMap='WorkOrderProgressModelResult'>
drop table if exists #TBL_WORK_FLOW_USER_PROFICIENCY
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
declare  @ExpQualified bit=1,@PROFICIENCYID tinyint

 SELECT  @PROFICIENCYID=PROFICIENCYID   FROM REFDATA.TBL_WF_PROFICIENCY_TYPE WHERE PROFICIENCYNAME='EXPERIENCED'

select * into #TBL_WORK_FLOW_USER_PROFICIENCY 
from (SELECT *,
ROW_NUMBER() OVER(PARTITION BY PROJECTID,WFID,SUBACTIVITYID,signumid ORDER BY LastModifiedOn DESC)RN
FROM TRANSACTIONALDATA.TBL_WORK_FLOW_USER_PROFICIENCY
WHERE  signumid= #{signumID}) tbl where rn=1

Drop table if exists #WOBooking

select
wb.WOID,
SUM(case when WOFS.ExecutionType in ('Automated','Automatic')then wb.Hours else 0 end) as AutomatedHours,
SUM(case when WOFS.ExecutionType is null or WOFS.ExecutionType not in ('Automated','Automatic') then wb.Hours else 0 end) as ManualHours,
max(StartDate) as startdate
into #WOBooking
from
transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS WOFS
INNER JOIN transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS wb on WOFS.WOID=wb.WOID and WOFS.BookingID = wb.BookingID
where wb.Type = 'BOOKING'and
wb.SignumID = #{signumID}
group by wb.WOID

Drop table if exists #WOData

select
distinct wo.DOID,
wcdef.wfid,
wo.woid,
wo.ParentWorkOrderID,
replace(wo.WOName,'''','') WOName ,
ps.ScopeName,
pdu.DeliverableUnitName,
wo.PROJECTID,
wo.priority AS WoPriority,
wo.SubActivityID,
case 
when wo.Status = 'ASSIGNED ' and prof.Displayedmode =@PROFICIENCYID and wo.isAutoSenseEnable IS NULL then 'PROJECTDEFINED_EXPERT' else wcdef.Type end as type,
wo.Status,
wp.priority,
wcdef.WorkFlowName,
wo.WorkFlowVersion
,wo.ActualStartDate,
wo.ActualEndDate,
wcdef.SubActivityFlowChartDefID,
wo.PlannedEndDate,
case when wo.isAutoSenseEnable IS NULL then @ExpQualified else case when wo.ProficiencyID =@PROFICIENCYID then 1 else 0 end end as Qualified,
wcdef.NENeededForExecution,
H.AutomatedHours,
H.ManualHours,H.AutomatedHours+ H.ManualHours TotalHours
,wo.SignumID,
h.StartDate,
wo.PlannedStartDate,
upper(concat(Emp.EmployeeName,'('+ wcdef.WFOwner+')'))as WFOwnerName,
wp.WOPlanID,
wo.IsAutoSenseEnable,
0.0 as CompletedPercentage,
'0 steps remaining out of total All' as ProgressDescription,
sub.TechnologyID,
sub.DomainID
into #WOData
from transactionalData.TBL_WORK_ORDER wo
inner join transactionalData.TBL_Deliverable_Order_ID doi on wo.DOID =doi.DOID
inner join transactionalData.TBL_WORK_ORDER_PLAN wp on wo.WOPlanID =wp.WOPlanID and wp.ProjectID = wo.PROJECTID
inner join transactionalData.TBL_PROJECTSCOPE ps on wp.ScopeID = ps.ProjectScopeID
inner join refData.TBL_Project_Deliverable_Unit pdu on ps.deliverableUnit = pdu.DeliverableUnitID
Inner join transactionalData.TBL_SUBACTIVITY_FLOWCHART_DEF wcdef on wcdef.ProjectID=wo.ProjectID and wcdef.SubActivityID = wo.SubActivityID and wcdef.VersionNumber = wo.WorkFlowVersion and wcdef.SubActivityFlowChartDefID=wo.flowchartdefid
inner join refData.TBL_SUBACTIVITY sub on wo.SubActivityID = sub.SubActivityID
left join refdata.tbl_employees EMP on EMP.Signum= wcdef.WFOwner
left join #TBL_WORK_FLOW_USER_PROFICIENCY prof on prof.SubActivityID=wo.SubActivityID and prof.ProjectID=wo.PROJECTID 
and wcdef.Multiview = 1 AND PROF.SignumID =WO.SignumID and prof.WFID=wcdef.WFID
LEFT JOIN #WOBooking as h on WO.WOID = h.WOID
where
wo.active=1 and wo.Status in (${status})
and wo.SignumID = #{signumID}

<if test="startDate != null and endDate != null">
and wo.PlannedStartDate between #{startDate} and #{endDate}
</if>

select DOID,wo.wfid,wo.woid,wo.ParentWorkOrderID,wo.WOName,wo.ScopeName,wo.DeliverableUnitName,wo.PROJECTID,wo.WoPriority,wo.SubActivityID,wo.type,wo.Status,wo.priority,wo.WorkFlowName,
wo.WorkFlowVersion,wo.ActualStartDate,wo.ActualEndDate,wo.SubActivityFlowChartDefID,wo.PlannedStartDate,wo.PlannedEndDate,wo.Qualified,wo.NENeededForExecution,wo.AutomatedHours,
wo.ManualHours,wo.TotalHours,wo.SignumID,wo.StartDate,wo.PlannedStartDate,wo.WFOwnerName,wo.WOPlanID,wo.IsAutoSenseEnable,
wonodes.nodetype,
replace(wonodes.NodeNames,',$','') NodeNames,
count(nodenames) over(partition by wo.woid) as NodeCount,
case when ne.Market is NULL or ne.Market = '' then '-' else replace(ne.Market,',$','') end as Market,
wo.CompletedPercentage,wo.ProgressDescription
from #WOData wo
Left join transactionalData.TBL_WORK_ORDER_NODES wonodes on wo.WOID = wonodes.woid
left join (select name, TechnologyID, DomainSubDomainID, ProjectID, Market, max(sector) sector
from transactionalData.TBL_NETWORK_ELEMENT
group by name, TechnologyID, DomainSubDomainID, ProjectID, Market) NE on NE.ProjectID=WO.ProjectID and NE.Name=wonodes.NodeNames and wo.TechnologyID=NE.TechnologyID 
and wo.DomainID=NE.DomainSubDomainID


</select>
	<resultMap type='WorkOrderProgressModel'
		id='WorkOrderProgressModelResult2'>
		<result property='woID' column='WOID' />
		<result property='parentWOID' column='ParentWorkOrderID'></result>
		<result property='doid' column='DOID' />
		<result property='woName' column='WOName' />
		<result property='deliverablePlanName' column='ScopeName' />
		<result property='deliverableUnitName'
			column='DeliverableUnitName' />
		<result property='projectID' column='ProjectID' />
		<result property='subActivityID' column='SubActivityID' />
		<result property='status' column='Status' />
		<result property='priority' column='Priority' />
		<result property='woPriority' column='WoPriority' />
		<result property='workFlowName' column='WorkFlowName' />
		<result property='nodeType' column='NodeType' />
		<result property='nodeCount' column='NodeCount' />
		<result property='digitialHours' column='AutomatedHours' />
		<result property='manualHours' column='ManualHours' />
		<result property='totalHours' column='TotalHours' />
		<result property='plannedstartDate' column='PlannedStartDate' />
		<result property='plannedclosedOn' column='PlannedEndDate' />
		<result property='actualstartDate' column='ActualStartDate' />
		<result property='actualclosedOn' column='ActualEndDate' />
		<!-- <result property='nodeName' column='NodeName' /> -->
		<result property='flowChartDefID'
			column='SubActivityFlowChartDefID' />
		<result property='versionNumber' column='WorkFlowVersion' />
		<result property='neRequired' column='NENeededForExecution' />
		<result property='flowChartType' column='Type' />
		<result property='wfid' column='wfid' />
		<result property='woPlanID' column='WOPlanID' />
		<result property='wFOwnerName' column='WFOwnerName' />
		<result property='workOrderAutoSenseEnabled' column='IsAutoSenseEnable' />
		<association property="proficiencyType" javaType='ProficiencyTypeModal'>
			<id property='proficiencyID' column='ProficiencyID'/>
			<result property='proficiencyName' column='ProficiencyName' />
			<result property='proficiencyLevel' column='ProficiencyLevel' />
		</association>
		<collection property='nodeNames'
			ofType='java.lang.String'>
			<result property="nodeNames" column="NodeNames" />
		</collection>
		<collection property='market'
			ofType='java.lang.String'>
			<result property="market" column="Market" />
		</collection>
	</resultMap>
	<select id='getWorkOrderDetailsBySignum' resultMap='WorkOrderProgressModelResult2'>
	Declare @SignumID varchar(10)=#{signumID}
     SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
             ;With WOBooking(WOID,AutomatedHours,ManualDisabledHours,ManualEnabledHours,StartDate) as
             (
             select
             wb.WOID,
             SUM(case when WOFS.ExecutionType in ('Automated','Automatic')
             then wb.Hours
             else 0 end) as AutomatedHours,
			 SUM(case when WOFS.ExecutionType in ('ManualDisabled')
             then wb.Hours
             else 0 end) as ManualDisabledHours,
             SUM(case when
             WOFS.ExecutionType is null
             or WOFS.ExecutionType not in
             ('Automated','Automatic','ManualDisabled') then wb.Hours
             else 0 end) as ManualEnabledHours,
             max(StartDate) as startdate
             from
             transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS WOFS
             INNER JOIN
             transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS wb on WOFS.WOID
             =
             wb.WOID
             and WOFS.BookingID = wb.BookingID
             where wb.Type = 'BOOKING'
             and
             wb.SignumID = @SignumID
             group by wb.WOID
             )
             
             select distinct wo.DOID,
             wcdef.wfid,wo.woid,wo.ParentWorkOrderID,wo.WOName, ps.ScopeName,
             pdu.DeliverableUnitName, wo.PROJECTID,wo.priority AS WoPriority,
             wo.SubActivityID,wcdef.Type as type,wo.Status,wp.priority,wcdef.WorkFlowName,wo.WorkFlowVersion
             ,wo.ActualStartDate,wo.ActualEndDate,
              wcdef.SubActivityFlowChartDefID,wo.PlannedStartDate,wo.PlannedEndDate,
			 wo.ProficiencyID,
			 profType.ProficiencyName,
			 profType.ProficiencyLevel,
             wcdef.NENeededForExecution,
             H.AutomatedHours,
             H.ManualEnabledHours as ManualHours,H.AutomatedHours+ H.ManualDisabledHours+H.ManualEnabledHours TotalHours
             ,wo.SignumID,h.StartDate,wp.WOPlanID,
             upper(concat(Emp.EmployeeName,'('+ wcdef.WFOwner+')'))as WFOwnerName,      
             wo.IsAutoSenseEnable,case when wond.NodeNames = '' then NULL else wond.NodeNames end as NodeNames,
             isnull(ne.Market,'') Market
             from transactionalData.TBL_WORK_ORDER wo
             inner join
             transactionalData.TBL_Deliverable_Order_ID doi on wo.DOID =
             doi.DOID
             inner join transactionalData.TBL_WORK_ORDER_PLAN wp on wo.WOPlanID =
             wp.WOPlanID
             and wp.ProjectID = wo.PROJECTID
             inner join
             transactionalData.TBL_PROJECTSCOPE ps on wp.ScopeID =
             ps.ProjectScopeID
             inner join refData.TBL_Project_Deliverable_Unit pdu
             on ps.deliverableUnit = pdu.DeliverableUnitID
             Inner join
             transactionalData.TBL_SUBACTIVITY_FLOWCHART_DEF wcdef on
             wcdef.ProjectID=wo.ProjectID
             and wcdef.SubActivityID = wo.SubActivityID
             and wcdef.VersionNumber = wo.WorkFlowVersion
             and
             wcdef.SubActivityFlowChartDefID=wo.flowchartdefid
             left join 
             refdata.tbl_employees EMP on EMP.Signum= wcdef.WFOwner
             LEFT JOIN WOBooking as h on WO.WOID = h.WOID
             left join transactionalData.TBL_WORK_ORDER_NODES wond on wo.WOID=wond.WOID 
             left join refData.tbl_WF_Proficiency_Type profType on profType.ProficiencyID=wo.ProficiencyID
             left join transactionalData.TBL_NETWORK_ELEMENT ne on wond.networkelementid = ne.NetworkElementID
             where
             wo.active=1 and wo.Status in (${status})
             and wo.SignumID = @SignumID
             and wo.PlannedStartDate &lt;= (DATEADD(minute, 330 , GETUTCDATE())+ 3)
             order by h.StartDate desc, wo.PlannedStartDate desc
	
	</select>

	<select id='getWoProgressData' resultType='java.util.Map'>
		SELECT perData.WOID,
		ISNULL(CAST(perData.CompletedPercentage as varchar(20)),0) as
		CompletedPercentage,
		ISNULL(CAST(perData.InProgressPrecentage as
		varchar(20)),0)as
		InProgressPrecentage
		From (
		SELECT total.WOID,
		ISNULL((CAST(completed.completedcount as real)/CAST(total.TotalCount
		as REAL))*100,0) as
		CompletedPercentage,
		ISNULL((CAST(inpgres.inProgressCount as real)/CAST(total.TotalCount as
		REAL))*100,0) as
		InProgressPrecentage
		FROM
		(
		select t1.WOID,
		COUNT(t1.StepID) as TotalCount from (
		select distinct WO.WOID,
		FS.StepID
		from transactionalData.TBL_WORK_ORDER WO
		LEFT Join
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS WFS on
		WO.WOID
		= WFS.WOID
		LEFT Join transactionalData.TBL_FLOWCHART_STEP_DETAILS FS on
		FS.StepID =
		WFS.FlowChartStepID
		and FS.Active=1 and FS.VersionNumber =
		Wo.WorkFlowVersion
		)as t1 group by WOID
		) as total
		LEFT join
		(
		select
		t2.WOID, COUNT(t2.InProgress) as inProgressCount from
		(
		select distinct
		WO.WOID, FS.StepID as InProgress
		from transactionalData.TBL_WORK_ORDER
		WO
		Inner JOIN transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS bd on
		wo.WOID =
		bd.WoID
		Inner Join(select Distinct
		FlowchartStepID,WOID,BookingID from
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS) WFS on
		bd.WOID = WFS.WOID
		and bd.BookingID = WFS.BookingID
		Inner Join
		transactionalData.TBL_FLOWCHART_STEP_DETAILS FS on FS.StepID =
		WFS.FlowChartStepID
		and FS.Active=1 and FS.VersionNumber =
		Wo.WorkFlowVersion
		where bd.Type not in ('LEADTIME') and bd.Status in
		('STARTED','ONHOLD')
		) as t2 group by WOID
		) as inpgres on total.WOID =
		inpgres.WOID
		LEFT join
		(
		select t3.WOID, COUNT(t3.Completed) as
		CompletedCount from
		(
		select distinct WO.WOID, FS.StepID as Completed
		from transactionalData.TBL_WORK_ORDER WO
		Inner JOIN
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS bd on wo.WOID =
		bd.WoID
		Inner Join(select Distinct FlowchartStepID,WOID,BookingID from
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS) WFS on
		bd.WOID = WFS.WOID
		and bd.BookingID = WFS.BookingID
		Inner Join
		transactionalData.TBL_FLOWCHART_STEP_DETAILS FS on FS.StepID =
		WFS.FlowChartStepID
		and FS.Active=1 and FS.VersionNumber =
		Wo.WorkFlowVersion
		where bd.Type not in ('LEADTIME') and bd.Status in
		('COMPLETED','SKIPPED')
		) as t3 group by WOID
		) as completed on
		total.WOID = completed.WOID
		) as perData where woid in (${woID})
	</select>


	<resultMap type="com.ericsson.isf.model.WorkOrderNodes" id="workOrderNodes">
		<id property="woID" column="WOID" />
		<result property="nodeType" column="NodeType"/>
		<collection property="nodeCount"  ofType="Integer">
			<result column="NodeCount"/>
		</collection>		
		<collection property="market"  ofType="String">
			<result column="Market"/>
		</collection>
		<collection property="nodeName"  ofType="String">
			<result column="NodeNames"/>
		</collection>
	</resultMap>
	
	<select id='getWONodeDetails' resultMap="workOrderNodes">
	
	    DROP TABLE IF EXISTS  #temp;
	
		select wo.projectid, wo.WOID,wond.NodeType, COUNT(distinct NodeNames) as NodeCount, wond.NodeNames, wo.SubActivityID into #temp
		from transactionalData.TBL_WORK_ORDER wo 
		inner join transactionalData.TBL_WORK_ORDER_NODES wond on wo.WOID=wond.WOID 
		where wo.WOID in (${woID})
		group by wo.WOID, NodeType,NodeNames, wo.projectid, wo.SubActivityID
		
		create clustered index IX_Project on #temp(ProjectID, NodeNames)
		
		select distinct wo.WOID,wo.NodeType, SUM(NodeCount) OVER (PARTITION BY WOID ) as NodeCount, wo.NodeNames,NE.Market 
		from #temp wo 
		inner join refdata.[tbl_subactivity] sub on sub.SubActivityID=wo.SubActivityID
		left join transactionalData.TBL_NETWORK_ELEMENT (nolock) NE on NE.ProjectID=WO.ProjectID and NE.Name=WO.NodeNames and sub.TechnologyID=NE.TechnologyID
		and sub.DomainID=NE.DomainSubDomainID
	</select>

	<select id='checkIFLastStepNew' resultType="java.util.Map">
			With CTE_A
			as
			(
			select FlowchartSourceID ,FlowchartTargetID
			from transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_LINK_DETAILS 
			where SubActivityFlowChartDefID =#{subactivityDefID}
			),
			CTE_B
			as
			(
			select FlowChartStepID,Decisionvalue
			from transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS d
			inner join ( 
			select distinct FlowchartSourceID 
			from CTE_A a
			inner Join (
			select distinct StepID 
			from [transactionalData].TBL_FLOWCHART_STEP_DETAILS
			where SubActivityFlowChartDefID = #{subactivityDefID} and active = 1
			
			EXCEPT
			
			select distinct FlowchartSourceID 
			FROM CTE_A
			) b on a.FlowchartTargetID = b.StepID
			) c on d.FlowChartStepID = c.FlowchartSourceID
			where 
			WOID = #{wOID} 
			and FlowChartDefID = #{subactivityDefID} 
			and status in ('COMPLETED','SKIPPED' )
			)	
			select FlowChartStepID 
			from CTE_B
			where Decisionvalue not in ('YES' , 'NO')
			
			UNION ALL
			
			select FlowChartStepID 
			from CTE_B
		
	</select>

	<select id='getWorkFlowNameForWoID'
		resultType='com.ericsson.isf.model.WorkFlowDetailsModel'>
		select def.WorkFlowName,def.type as Type,wo.flowchartdefid,def.WFID, def.VersionNumber from
		transactionalData.TBL_WORK_ORDER WO
		JOIN transactionalData.TBL_SUBACTIVITY_FLOWCHART_DEF def on def.ProjectID=WO.ProjectID
		and def.SubActivityID = WO.SubActivityID
		and def.SubActivityFlowChartDefID=WO.flowchartdefid
		and
		def.VersionNumber= WO.WorkFlowVersion
		where WO.WOID= #{wOID}
		
	</select>

	<select id='getExpertWorkFlow' resultMap="WOWorkFlowModelResult">
		select top 1
		sfd.SubActivityFlowChartDefID,sfd.FlowChartJSON,sfd.workFlowName, sfd.VersionNumber,
		sfd.IsAutoSenseEnable as workFlowAutoSenseEnabled,wo.IsAutoSenseEnable as workOrderAutoSenseEnabled,sfd.Multiview from
		transactionalData.TBL_SUBACTIVITY_FLOWCHART_DEF sfd
		inner join transactionalData.TBL_WORK_ORDER wo on
		wo.ProjectID = sfd.ProjectID
		where wo.WOID = #{wOID}
		and wo.SubActivityID =
		sfd.SubActivityID
		and sfd.workFlowName =#{wfName} and sfd.Type in
		('PROJECTDEFINED','PROJECTDEFINED_EXPERT','CUSTOM')
		and sfd.FlowchartJSON is not
		NULL and sfd.SubActivityFlowChartDefID =
		#{expertDefId}
		order by
		sfd.SubActivityFlowChartDefID desc
		
	</select>

	<select id='getWOCreationDeatilsByWOName'
		resultType='java.util.HashMap'>
		select top 1
		WOCreationID,ProjectID,SubserviceArea,Domain,SubDomain,Technology,WOID,ScopeName,SubActivityID,SubActivityName,Priority,SLAHours,
		AssignTo,StartDate,StartTime,WorkOrderName,WorkFlowName,NodeType,NodeNames,CreatedBy,CreatedDate,LastModifiedBy,
		LastModifiedDate,ExternalSourceID,ExternalSourceName,UploadedBy,ExecutionPlanID,ExternalProjectID,convert(varchar(25),
		ForecastStartDate,126)+'Z'
		ForecastStartDate,ForecastEndDate,ExternalActivityID,ExternalActivityName,ParentWorkPlanId,ParentWorkPlanName,Status,ErisiteBusinessObject,
		HasFault,SystemRecordId,RecordName,ParentProjectIntegratedScoping,AssignedGroup,source_system_id,message_batch_id,transaction_id,
		businessentityid,ParentWorkPlanRecordID
		from transactionalData.TBL_BULK_WORK_ORDER_CREATION where
		WorkOrderName like '%${getwOName}%'
		order by CreatedDate desc
	</select>

	<select id='getStepNameByBookingID' resultType='String'>
		select distinct
		stepName from
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS
		wofsd
		join
		transactionalData.TBL_FLOWCHART_STEP_DETAILS fsd on
		fsd.SubActivityFlowChartDefID = wofsd.FlowChartDefID and
		wofsd.FlowChartStepID = fsd.StepID and wofsd.TaskID = fsd.TaskID
		where
		BookingID = #{bookingID}
	</select>

	<select id='getExistingWFDefID' resultType='java.util.HashMap'>
		select
		FlowChartDefID,Status from transactionalData.TBL_WORK_ORDER where
		WOID=#{wOID}
	</select>

	<update id='updateWODefID'>
		update transactionalData.TBL_WORK_ORDER set
		flowchartdefid =
		#{flowChartDefID} where WOID = #{wOID}
	</update>

	<select id='getWoDateDataByWoId' resultType='java.util.HashMap'>
		select
		convert(varchar(25), ActualStartDate,126)+'Z' ActualStartDate ,
		convert(varchar(25), ActualEndDate,126)+'Z' ActualEndDate from
		transactionalData.TBL_WORK_ORDER where WOID = #{getwOID}
	</select>
	<select id='getProjectIdByWoid' resultType='String'>
		SELECT [PROJECTID]
		FROM [transactionalData].[TBL_WORK_ORDER]
		where woid=#{wOID}
	</select>
	<select id='getWODetails' resultType='java.util.HashMap'>
	   SELECT actualstartdate, 
       actualenddate, CONVERT(datetime, CONVERT(VARCHAR(25),Dateadd(ss, -1 * Datediff(ss, Getutcdate(), 
       dbo.Getdateist()), actualstartdate), 126))AS ActualStartDateUTC, 
       CONVERT(datetime, CONVERT(VARCHAR(25), 
       Dateadd(ss, -1 * Datediff(ss, Getutcdate(), dbo.Getdateist()), actualenddate), 126))  AS 
       ActualEndDateUTC 
       FROM   transactionaldata.tbl_work_order 
       WHERE  woid = #{getwOID}
	</select>

	<select id='populateEfficiencyData'>
		{call usp_getEFiciencyIndex(#{startDate,mode=IN},
		#{endDate,mode =IN})}
	</select>


	<select id='populateDeliveryData'>
		{call usp_getDeliveryIndex(#{startDate,mode=IN},
		#{endDate,mode =IN})}
	</select>


	<select id='getEfficiencyDevlieryIndexForUser'
		resultType='java.util.LinkedHashMap'>
		{call usp_getEFiciencyIndex_WOWise( #{WOID,mode=IN} )};
	</select>

	<select id='getEfficiencyDevlieryPerformance'
		resultType='java.util.LinkedHashMap'>
		select distinct del.EmployeeName,CAST(del.[EFiciency Index%] as float)
		as EFiciencyIndex, CAST(del.[FTR%] as float) as FTR,CAST(del.[SLA%] as
		float) as SLA, CAST(del.[DeliveryIndex%] as float) as DeliveryIndex
		from ISFReporting.Reports.DeliveryIndexDump_Oct18 del
		<if test="subActivity != null">
			Inner Join ISFReporting.Reports.EFiciencyIndexDump_Oct18
			ef
			on ef.projectID = del.projectID and ef.subActivity =#{subActivity}
		</if>
		where del.projectID = #{projectID}
		<if test="signumID != null">
			and del.WOSignumID = #{signumID}
		</if>
	</select>

	<update id='updateWoSignumToNull'>
		UPDATE transactionalData.TBL_WORK_ORDER SET 
		SignumID = NULL,
		IsAutoSenseEnable = NULL,
		LASTMODIFIEDDATE=dbo.GetDateIST(), LASTMODIFIEDBY= #{woData.signumID}
		WHERE WOID=#{woData.wOID}

	</update>

	<select id='checkTaskStatus'
		resultType='java.util.LinkedHashMap'>
		select woid from
		[transactionalData].[TBL_WORK_ORDER_BOOKING_DETAILS] where status =
		'STARTED'
		and WOID = #{woData.wOID}
	</select>
	<!-- <select id='checkTaskStatus' resultType='java.util.LinkedHashMap'> 
		select * from [transactionalData].[TBL_WORK_ORDER_BOOKING_DETAILS] where 
		status = 'STARTED' and signumid = #{woData.senderSignum} and WOID = #{woData.wOID} 
		</select> -->

	<select id='getSourceSystemDetails'
		resultType='com.ericsson.isf.model.SourceSystemDetailsModel'>
		select externalGroup from refdata.TBL_IntegrationSources
		where source_system_id = #{sourceSystemId}
	</select>

	<select id='checkIfAllTaskCompleted'
		resultType='Integer'>
		;With CTE(execPlanGroupId)
		as
		(select execPlanGroupId
		from
		[transactionalData].[TBL_ExecutionPlan_Flow]
		Where WOID=#{woID})
		select
		count(1) from
		[transactionalData].[TBL_ExecutionPlan_Flow]
		Where execPlanGroupId
		in(select execPlanGroupId from CTE) and isComplete =
		0
	</select>

	<select id='getIntegratedSource' resultType='String'>
		select sourceName as
		C from refData.TBL_IntegrationSources where
		sourceName=#{signum} and
		sourceName is not null UNION
		select
		source_system_id as C from
		refData.TBL_IntegrationSources where
		source_system_id=#{signum} and
		source_system_id is not null
	</select>

	<select id='getFlowChartStepLinkDetailsByWoId'
	resultType='com.ericsson.isf.model.WorkFlowStepLinksDetailModel'>
	<!-- Old Query -->
	<!-- SELECT ld.SubActivityFlowChartDefID,sd.stepid sourceStepid, ld.FlowchartTargetID 
		targetStepId ,StepName sourceStepName,StepType sourceStepType FROM transactionalData.TBL_FLOWCHART_STEP_DETAILS 
		sd left join transactionaldata.TBL_WORK_ORDER_FLOWCHART_STEP_LINK_DETAILS 
		ld on ld.FlowchartSourceID=sd.stepid and sd.SubActivityFlowChartDefID=ld.SubActivityFlowChartDefID 
		WHERE sd.active=1 and sd.SubActivityFlowChartDefID = ( select flowchartdefid 
		from transactionaldata.TBL_WORK_ORDER where woid=#{woid} ) -->

	<!-- Modified Query -->
	SELECT
	ld.SubActivityFlowChartDefID,
	sd.stepid sourceStepid,
	ld.FlowchartTargetID targetStepId,
	StepName sourceStepName,
	StepType
	sourceStepType
	FROM
	transactionaldata.TBL_WORK_ORDER wo
	inner join
	transactionalData.TBL_FLOWCHART_STEP_DETAILS sd
	on
	sd.SubActivityFlowChartDefID = wo.flowchartdefid and wo.woid = #{woid}
	left join transactionaldata.TBL_WORK_ORDER_FLOWCHART_STEP_LINK_DETAILS
	ld
	on ld.FlowchartSourceID=sd.stepid and
	sd.SubActivityFlowChartDefID=ld.SubActivityFlowChartDefID
	WHERE
	sd.active=1
  </select>


	<select id='getBookingDetailsByBookingId'
		resultType='com.ericsson.isf.model.BookingDetailsModel'>
		SET
		TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
		
		SELECT
		bookingID,woId,taskId,startdate,enddate,hours,parentBookingDetailsId,type,status,signumId,reason,outputLink,parallelcount,referenceId
		from [transactionalData].TBL_WORK_ORDER_BOOKING_DETAILS
		where
		bookingid=#{bookingId}
	</select>

	<update id='updateReferenceIDByBookingId'>
		UPDATE
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS
		SET referenceId = #{referenceId},
		ModifiedBy = #{signumID},
		ModifiedDate = dbo.GetDateIST()
		WHERE bookingId=#{bookingId}
	</update>

	<insert id='saveExternalExecDetails'>
		INSERT INTO
		[transactionalData].externalExecutionDetails
		(isfreferenceid,externalreferenceid)
		values
		(#{isfRefId},#{externalRefId})
	</insert>
	<select id='getExternalExecDetailsbyRefId'
		resultType="com.ericsson.isf.model.ExternalExecutionDetailsModel">
		select * from [transactionalData].externalExecutionDetails
		where [isfreferenceid]=#{isfRefId}
	</select>

	<select id='getMarketByWoid' resultType='string'>		
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
		select distinct NE.Market 
from transactionalData.TBL_WORK_ORDER wo
inner join transactionalData. TBL_WORK_ORDER_NODES wond on wo.WOID=wond.WOID
inner join transactionalData. TBL_SUBACTIVITY_FLOWCHART_DEF def on def.SubActivityFlowChartDefID=wo.flowchartdefid
inner join refData.TBL_SUBACTIVITY sa on sa.SubActivityID=def.SubActivityID
inner join refData.TBL_DOMAIN ( nolock) dom on dom.DomainID=sa.DomainID and dom.Active=1
left join transactionalData. TBL_NETWORK_ELEMENT (nolock) NE on NE.ProjectID=WO.ProjectID and NE.Name=WOND.NodeNames and dom.DomainID=NE.DomainSubDomainID and sa.TechnologyID=NE.TechnologyID
where wo.WOID = #{woid} and NE.Market is not null
group by wo.WOID, NodeType,NodeNames,NE.Market

	</select>
	<select id='validateUserLoginHistory' resultType="java.util.Map">
		select top 1 LOGID
		from transactionalData.TBL_USER_LOGIN_HISTORY 
		where SignumID = #{userLogin.signumID} and LogoutTime is null 
		and LTRIM(DATEDIFF(MINUTE, LoginTime,dbo.GetDateIST())) &lt;= 70 
	</select>

	<select id='getWODetailsByWoid' resultType='java.util.HashMap'>
		select Status from
		transactionalData.TBL_WORK_ORDER where WOID=#{woID}
	</select>

	<select id="getAlreadyStartedBookingsByWoID"
		resultType="com.ericsson.isf.model.BookingDetailsModel">
		select WOID from
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS where WOID =
		#{woID}
		and EndDate is Null and status ='STARTED'
	</select>

	<select id='isInstalledDesktopVersionUpdated'
		resultType="java.util.HashMap">
		SELECT deployedVersion,CASE WHEN deployedVersion = (select
		top 1 version as
		installedVersion from
		transactionalData.TBL_ISFDesktopVersionUserWise
		where
		SignumID=#{signumID} order by UpdatedOn desc)
		THEN 1 else 0 END as
		result FROM (select top 1 Version as deployedVersion
		from
		refData.TBL_ISFDesktopUpdates where Active=1 and UpdateType='App')q
	</select>

	<update id='updateOnlyBookingsStatusByIds'>
		UPDATE[transactionalData].[TBL_WORK_ORDER_BOOKING_DETAILS]
		set
		[status]=#{status},
		ModifiedBy = #{signumID},
		ModifiedDate = dbo.GetDateIST()
		where bookingid in (${bookingids});
	</update>
	<update id='updateOnlyBookingsReasonByIds'>
		UPDATE[transactionalData].[TBL_WORK_ORDER_BOOKING_DETAILS]
		set
		[Reason]=#{reason},
		ModifiedBy = #{signumID},
		ModifiedDate = dbo.GetDateIST()
		where bookingid in (${bookingids});
	</update>

	<select id='countInvalidStepsForClouser' resultType="Integer">
		select
		count(isValidForSuccess) as countInvalidStepsForClouser from
		(Select
		case
		when (
		(((wofsd.ExecutionType='Automatic' and bk.Status
		='SKIPPED'))
		or (wofsd.ExecutionType='Automatic' and bk.Status
		='COMPLETED' and
		lower(Reason)='success'))
		or
		(wofsd.ExecutionType='Manual' and bk.Status in
		('COMPLETED','SKIPPED'))
		)
		then
		1
		else
		0
		end as isValidForSuccess FROM
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS bk
		join
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS wofsd on
		wofsd.BookingID = bk.BookingID
		where FlowChartDefID =
		#{saveClosureDetailsForWOModel.subactivityDefID} and
		wofsd.BookingID!=0 and BK.BookingID in
		(select MAX(BookingID) as
		BookingID from
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS
		where woid = #{saveClosureDetailsForWOModel.wOID} group by TaskID)
		)q
		where isValidForSuccess=0
	</select>

	<select id="getStartedBookingsBySignum1"
		resultType="com.ericsson.isf.model.BookingDetailsModel">
		select * from
		[transactionalData].TBL_WORK_ORDER_BOOKING_DETAILS
		where
		[status] in
		('STARTED') and type='booking'
		and SignumID=#{signumID}
	</select>

	<select id="getWorkOrderPriority" resultType="String">
		select Priority
		from transactionalData.TBL_WORK_ORDER where WOID=#{woID}
	</select>

	<update id="updateWorkOrderPriority">
		update transactionalData.TBL_WORK_ORDER set	Priority=#{priority} where	WOID=#{woID}
	</update>

	<insert id='saveAutomaticStepClosureDetails'
		parameterType="com.ericsson.isf.model.botstore.ServerBotModel">
		insert into
		transactionalData.TBL_AUTOMATIC_STEP_CLOSURE_DETAILS
		(
		[SignumID]
		,[WOID]
		,[BookingID]
		,[FlowChartDefID]
		,[StartDate]
		,[EndDate]
		,[FlowChartStepID]
		,[TaskID]
		,[ExecutionType]
		,[Status]
		,[Reason]
		,[Type]
		,[Hours]
		,[OutputLink]
		,[ClosedOn]
		,[ClosedBy]
		  ,[CreatedBy]
         ,[CreatedDate]
         ,[ModifiedBy]
         ,[ModifiedDate]
		)
		select
		wo.SignumID
		,wo.WOID
		,wo.BookingID
		,wof.FlowChartDefID
		,wo.StartDate
		,dbo.GetDateIST()
		,wof.FlowChartStepID
		,wo.TaskID
		,wof.ExecutionType
		,'COMPLETED'
		,#{serverBotModel.reason}
		,#{serverBotModel.type}
		,#{hours}
		,#{serverBotModel.outputLink}
		,dbo.GetDateIST()
		,#{serverBotModel.signumID}
		  ,wo.SignumID
          ,dbo.GetDateIST()
          ,wo.SignumID
          ,dbo.GetDateIST()
		from transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS wo
		join
		transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS wof on
		wof.BookingID = wo.BookingID
		where wo.BookingID = #{bookingID}
	</insert>

	<select id='getExpertDefID' resultType="Integer">
		select top 1
		SubActivityFlowChartDefID from
		transactionalData.TBL_SUBACTIVITY_FLOWCHART_DEF where WFID=#{wfid}
		and
		WorkFlowName=#{wfName}
		order by VersionNumber desc
	</select>

	<select id='isWoAssignedToSignum' resultType="Boolean">
		IF Exists(SELECT 1
		FROM transactionalData.TBL_WORK_ORDER where WOID =
		#{woId} and Active=1
		and SignumID= #{signumID} )
		Begin
		Select 1 as 'Result'
		End
		else
		Begin
		Select 0 as 'Result'
		End
	</select>
	
	<select id='getWONodeDetailsByWOID' resultType="java.util.Map">
		select distinct WOID,NodeType,COUNT(distinct NodeNames) NodeCount,NodeNames from transactionalData.TBL_WORK_ORDER_NODES where WOID in (${woIDValue})
	group by WOID, NodeType,NodeNames
		</select>

     <select id='getMaxBookingId' resultType="Integer">
        
         <!--  select max(BookingID) from transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS 
         where WOID = #{woID} and Type not in('LEADTIME')-->
         
         select max(BookingID) from transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS with (index(NCI_WOID_taskid_Type))
		  where WOID = #{woID} and Type not in('LEADTIME')
         
     </select>
     
    <select id='getWorkOrderSuccessReasons' resultType='com.ericsson.isf.model.DeliverableSuccessReasonModel'>
		
		SELECT DSR.SuccessReasonID,DSR.SuccessReason,DSR.EncodedSuccessReason,DSR.DeliverableUnit deliverableUnitId,DSR.IsActive,
		DSR.CreatedBy, DSR.ModifiedBy ,CONVERT(DATE,DSR.CreatedOn) createdOn ,CONVERT(DATE,DSR.ModifiedOn) modifiedOn FROM transactionalData.TBL_WORK_ORDER WO 
		INNER JOIN transactionalData.TBL_WORK_ORDER_PLAN PLN ON WO.WOPlanID = PLN.WOPlanID
		INNER JOIN transactionalData.TBL_PROJECTSCOPE SP ON SP.ProjectScopeID = PLN.ScopeID
		INNER JOIN transactionalData.TBL_DEliverableSuccessReason DSR on DSR.DeliverableUnit=SP.deliverableUnit
		AND wo.PROJECTID = sp.ProjectID WHERE WO.WOID=#{wOID} and DSR.IsActive=1
			
	</select>
	

        
	<insert id='addDeliverableSuccessReason' parameterType="com.ericsson.isf.model.DeliverableSuccessReasonModel">
		Insert INTO transactionalData.TBL_DeliverableSuccessReason
		(DeliverableUnit,
		 SuccessReason,
		 CreatedBy,
		 CreatedOn,
		 ModifiedBy,
		 ModifiedOn,
		 EncodedSuccessReason,
		 isActive) 
		 VALUES 
		(#{deliverableSuccessReasonModel.deliverableUnitId},
		 #{deliverableSuccessReasonModel.successReason},
		 #{signum},
		 dbo.GetDateIST(),
		 #{signum},
		 dbo.GetDateIST(),
		 #{deliverableSuccessReasonModel.encodedSuccessReason},
		 1 )
		
	</insert>
	
	<update id="updateDeliverableSuccessReason">
		update transactionalData.TBL_DeliverableSuccessReason
		set
		ModifiedBy=#{signum},
		ModifiedOn=dbo.GetDateIST(),
		SuccessReason=#{deliverableSuccessReasonModel.successReason},
		EncodedSuccessReason=#{deliverableSuccessReasonModel.encodedSuccessReason}
		WHERE SuccessReasonID=#{deliverableSuccessReasonModel.successReasonId} 
	</update>
	
	<select id='validateSuccessReason' resultType="Boolean">
		If Exists(select 1 from transactionalData.TBL_DEliverableSuccessReason 
		where DeliverableUnit=#{deliverableSuccessReasonModel.deliverableUnitId}
		and (SuccessReason=#{deliverableSuccessReasonModel.successReason} or EncodedSuccessReason=#{deliverableSuccessReasonModel.encodedSuccessReason}) )
		Begin
		select 1 as result
		end
		else
		begin
		select 0 as result
		end
	</select>
	
	<select id='getAllSuccessReasons' resultType='com.ericsson.isf.model.DeliverableSuccessReasonModel'>
		
	    SELECT  SuccessReasonID,SuccessReason, EncodedSuccessReason,DeliverableUnit deliverableUnitId,
		CreatedBy, ModifiedBy ,CONVERT(DATE,CreatedOn) createdOn ,CONVERT(DATE,ModifiedOn) modifiedOn, IsActive 
		from transactionalData.TBL_DeliverableSuccessReason where DeliverableUnit=#{deliverableUnitId}
	   
	</select>
	
	<update id="saveReasonStatusActive" > 
		update transactionalData.TBL_DeliverableSuccessReason
		 set isActive=1,
		 ModifiedBy=#{signum},
		ModifiedOn=dbo.GetDateIST()
		WHERE SuccessReasonID=#{deliverableSuccessReasonModel.successReasonId}  
	
	</update>
	
	 <update id="saveReasonStatus" >
		update transactionalData.TBL_DeliverableSuccessReason
		set isActive=0,
		ModifiedBy=#{signum},
		ModifiedOn=dbo.GetDateIST()
		WHERE SuccessReasonID=#{deliverableSuccessReasonModel.successReasonId} 
		
	 </update>
	
	 <select id='getExecutionType' resultType='String'>
		select ExecutionType from transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS where WOID=#{wOID} and FlowChartStepID=#{stepid} and TaskID=#{taskID} and BookingID=#{bookingId}
	 </select>
	
	 <select id='getEventPublisherURLMappingModel' 
	 	resultType="com.ericsson.isf.model.EventPublisherURLMappingModel">

		select top 1 epum.SourceID, SourceURL, Category,Payload,EventPublisherID 
		from refData.TBL_EventPublisherURLMapping  epum
		join refData.TBL_External_Sources es on es.SourceID = epum.SourceID
		where es.SourceName=#{sourceName} and  Category=#{category} 
		order by epum.EventPublisherID desc

	 </select>
    
	<select id='getSadCountForStep' resultType='String' flushCache="true" >
SELECT TOP 1 fa.SadCount
		FROM   transactionaldata.tbl_feedbackdetail fd 
		       JOIN transactionaldata.tbl_feedbackactivity fa 
		         ON fd.feedbackdetailid = fa.feedbackdetailid
		WHERE  fd.isactive = 1
			   AND stepid = #{stepID}
		       AND fa.isactive = 1
		       and fa.CreatedBy =#{signum}
		       and fd.FeedbackType='ONSTEP_SAD_COUNT'
   			   and fd.FeedbackOn='DEL_EXE_ONSTEP'
   			   and fd.flowchartDefID=#{defID}
		ORDER  BY fa.ModifiedDate DESC
	
	
		<!-- If Exists(SELECT fa.SadCount
		FROM   transactionaldata.tbl_feedbackdetail fd 
		       JOIN transactionaldata.tbl_feedbackactivity fa 
		         ON fd.feedbackdetailid = fa.feedbackdetailid 
		       JOIN transactionalData.TBL_WORK_ORDER WO on fd.flowchartDefID = WO.flowchartDefID
		WHERE  fd.isactive = 1 and WO.SignumID=#{signum} and fa.CreatedBy= #{signum} 
				and fd.FeedbackType='ONSTEP_SAD_COUNT'
		   		 and fd.FeedbackOn='DEL_EXE_ONSTEP')
		Begin
		SELECT TOP 1 fa.SadCount
		FROM   transactionaldata.tbl_feedbackdetail fd 
		       JOIN transactionaldata.tbl_feedbackactivity fa 
		         ON fd.feedbackdetailid = fa.feedbackdetailid 
		         JOIN transactionalData.TBL_WORK_ORDER WO on fd.flowchartDefID = WO.flowchartDefID
		WHERE  fd.isactive = 1
			   AND stepid = #{stepID}
		       AND fa.isactive = 1
		       and WO.SignumID=#{signum}
		       and fa.CreatedBy= #{signum}
		       and fd.FeedbackType='ONSTEP_SAD_COUNT'
   			   and fd.FeedbackOn='DEL_EXE_ONSTEP'
		ORDER  BY fa.ModifiedDate DESC
		end
		else
		begin
		select 0 as result
		end -->
	</select>
	
    <select id='getWOAssignedTo' resultType='String'>
		 select SignumID from transactionalData.TBL_WORK_ORDER  
			   where WOID= #{wOID}
	</select>
	<select id="getFlowChartType" resultType='String'>
	select top 1 type from transactionalData.TBL_SUBACTIVITY_FLOWCHART_DEF tsfd
		inner join transactionalData.TBL_WORK_ORDER wo
		on wo.flowchartdefId=tsfd.SubActivityFlowChartDefID
		where WOID = #{wOID}
	</select>
	
	<select id='checkStartedTaskInBooking' resultType="Boolean">
	IF EXISTS(select 1 from transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS
	where WOID=#{wOID} and Status='STARTED')
	begin
	select 1 as result
	end
	else
	begin
	select 0 as result
	end
    </select>
    
    <select id= 'getBookingDetailsandHours' resultType='com.ericsson.isf.model.BookingDetailsModel'>
     
    With CTE_C AS (
    select ISNULL((case when SUM(Hours) >= 1 then CAST(CAST(SUM(Hours) as DECIMAL(10,4)) as varchar(12)) + ' hrs' when SUM(Hours) * 60 >= 1 
then CAST(CAST((SUM(Hours) * 60) as DECIMAL(10,4)) as varchar(12)) + ' minutes' 
else CAST(CAST((SUM(Hours) * 60 * 60) as DECIMAL(10,2)) as varchar(12)) + ' seconds' end),0) as Effort,fs.woid,fs.FlowChartStepID 
from transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS fs 
Inner Join transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS bk on fs.BookingID = bk.BookingID
where fs.FlowChartStepID=#{stepID} and fs.woid=#{wOID} and bk.Type not in ('LEADTIME') 
group by fs.woid,fs.FlowChartStepID
    ) 
  
<if test='bookedID != 0'>
SELECT
        Effort,bk.bookingID,bk.woId,bk.taskId,bk.StartDate,bk.EndDate,bk.Hours,bk.ParentBookingDetailsID,bk.Type,bk.Status,bk.SignumID,
        bk.Reason,bk.OutputLink,bk.parallelcount,bk.referenceid
        from [transactionalData].TBL_WORK_ORDER_BOOKING_DETAILS BK
        join transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS fs on fs.BookingID=bk.BookingID
        Join CTE_C T on t.FlowChartStepID=fs.FlowChartStepID
        where  bk.bookingid=#{bookedID}
    
    </if>
    <if test='bookedID == 0'>
    select Effort,woid,FlowChartStepID
     from CTE_C
    </if>
    
    </select>

    <select id="getAutoSenseSourceIdOnSourceName" resultType="Integer" useCache="true">
    select sourceId from refData.TBL_IntegrationSources  where sourceName=#{sourceName}
    </select>
    
    <select id="getDecsionDetailsByChildStep" resultType='com.ericsson.isf.model.StepDetailsModel'>
		select cells.SourceID as flowChartStepId, cells.LabelText as decisionValue from transactionalData.TBL_SUBACTIVITY_FLOWCHART_DEF sfd
		CROSS APPLY OPENJSON(sfd.FlowChartJSON)
		WITH(
		cells nvarchar(max) as json
		)as FlowChart
		 CROSS APPLY OPENJSON (FlowChart.cells) WITH (
		SourceID  NVARCHAR(600) '$.source.id',
		TargetID NVARCHAR(600) '$.target.id',
		LabelText  NVARCHAR(400) '$.labels[0].attrs.text.text'
		) as cells
		where sfd.SubActivityFlowChartDefID=#{flowChartDefID} 
		and cells.TargetID=#{flowChartStepId}
		and cells.LabelText is not null
	</select>
	
	<select id="getMarkets" resultType='String' useCache="true">
		select distinct ISNULL(Market,'') as Market from transactionalData.TBL_NETWORK_ELEMENT  where ProjectID=#{workOrderColumnMappingModel.projectID} and Name IN
		<foreach collection="workOrderColumnMappingModel.nodeNames" item="node" index="index" open="(" separator=","  close=")">
         #{node}
         </foreach>
	</select>
    
     <select id='getJsonValue' resultType='String'>
		select FlowChartJSON from transactionalData.TBL_SUBACTIVITY_FLOWCHART_DEF where  SubActivityFlowChartDefID=#{flowChartDefID}
	</select>
	
	
	<insert id='addNewBooking'
		parameterType="list"
		useGeneratedKeys="true"
		keyProperty="bookingID"
		keyColumn="bookingID" >
		insert into
		[transactionalData].[TBL_WORK_ORDER_BOOKING_DETAILS]([WOID],[TaskID],[StartDate],[EndDate],[ParentBookingDetailsID],[Type],[Status],[SignumID]
		,[Reason],[outputLink],[parallelcount]
		,referenceId
		,CreatedBy,CreatedDate,ModifiedBy ,ModifiedDate,source_id
					,[hours]
				)
				values
				<foreach collection="list" item="booking" separator=",">
				(
				#{booking.woId},#{booking.taskId},convert(varchar(25),
				dbo.GetDateIST(), 120),convert(varchar(25), #{booking.endDate, jdbcType =
				TIMESTAMP}, 120),
				#{booking.parentBookingDetailsId},#{booking.type},#{booking.status}
				,#{booking.signumId},#{booking.reason},#{booking.outputLink},#{parallelCount},#{booking.referenceId}
				,#{booking.signumId} ,dbo.GetDateIST(),#{booking.signumId},dbo.GetDateIST(),#{booking.sourceid}
				
				 <choose>
				    <when test="booking.endDate != null">
				     ,DATEDIFF ( MI , dbo.GetDateIST(),#{booking.endDate} )/60.0
				    </when>
				    <otherwise>
				      ,NULL
				    </otherwise>
				  </choose>
				  )
				</foreach>
	</insert>
	
	<update id='checkAndUpdateFlowChartDefID'>
		with CTE_A as(
		select FlowChartDefID,Status from transactionalData.TBL_WORK_ORDER where
			WOID=#{wOID}
		)
		update transactionalData.TBL_WORK_ORDER set
		flowchartdefid = #{flowChartDefID}
		where WOID = #{wOID} 
		and (select  Status from CTE_A) ='ASSIGNED'
		and (select  FlowChartDefID from CTE_A)!=#{flowChartDefID}
	</update>
	
	<update id='markWorkOrderAsStarted'>
		If NOT Exists(select top 1 bd.BookingID,bd.enddate,bd.Status from
				transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS bd
				left join
				transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS sd on
				sd.bookingid=bd.bookingid
				where bd.WOID = #{wOID}  AND bd.Type !='LEADTIME'
				order by bookingID desc)
			Begin 
				update transactionalData.TBL_WORK_ORDER set Status ='INPROGRESS',
				ActualStartDate = dbo.GetDateIST(),
				LastModifiedDate = dbo.GetDateIST(),
				LastModifiedBy= #{signum} 
				where WOID = #{wOID} 
			End 
		Else IF((select Status from transactionalData.TBL_WORK_ORDER where WOID=#{wOID} )='ONHOLD')
			Begin
				update
				transactionalData.TBL_WORK_ORDER set Status='INPROGRESS',
				LastModifiedBy= #{signum},
				LastModifiedDate=dbo.GetDateIST()
				where WOID = #{wOID} 
			End 
	</update>
	
	<select id='getBookingDetailsByWorkOrderID' resultType="com.ericsson.isf.model.BookingDetailsModel">
    select  Reason , Status from  transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS
     where BookingID IN  (select max(BookingID) from  transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS where woID = #{woID})
    </select>
    
    <select id='getWFUserProficiency' resultType="com.ericsson.isf.model.UserWorkFlowProficencyModel">
	 declare @multiView TINYINT;
	 declare @proficiencyAssessed VARCHAR(100)='Assessed'
	 declare @proficiencyExperienced VARCHAR(100)='Experienced'
	 declare @kpiName VARCHAR(100)='Qualify Count'
	 declare @signum VARCHAR(10)=#{signumID}
	 declare @wfName NVARCHAR(1000)
	 declare @kpiValue int 
	 declare @subactivityID int	=#{subactivityID}
	 declare @wfID int	=#{wfID}
	 declare @projectID int	=#{projectID}
	 declare @defID int	=#{defID}
	 declare @proficiencyName varchar(100)

	IF Exists(select 1
			from transactionaldata.TBL_SubactivityFlowChart_Kpi_Value
			where SubActivityFlowChartDefID=@defID and  KpiID= (select KpiID from REFDATA.TBL_WF_PROFICIENCY_KPI where KpiName =@kpiName)
		 )
		Begin
				Select @kpiValue= KPIValue   from (
				select kpiid,KPIValue,ProjectID,wfid,SubactivityID,
				ROW_NUMBER() over(partition by kpiid,ProjectID,wfid,SubactivityID order by modifiedDate desc)rn
				from transactionaldata.TBL_SubactivityFlowChart_Kpi_Value
				where  wfid=#{wfID} and IsActive=1
				 and KpiID= (select KpiID from REFDATA.TBL_WF_PROFICIENCY_KPI where KpiName =@kpiName)
				)tbl where rn=1   
		End
		else
		Begin
				Select @kpiValue= -1
		
		End 
	
	 select @multiView =  MultiView, @wfName=  WorkFlowName 
	  from transactionalData.TBL_SUBACTIVITY_FLOWCHART_DEF 
	 where  SubActivityID= @subactivityID
	 and WFID= @wfID
	 and ProjectID=@projectID
	 and SubActivityFlowChartDefID=@defID
	
	 if @multiView=1
	 BEGIN
		if exists (select top(1) UP.WorkFlowName
			from TRANSACTIONALDATA.TBL_WORK_FLOW_USER_PROFICIENCY UP
			join refData.TBL_WF_Proficiency_Type PT on UP.DisplayedMode=PT.ProficiencyID
			where UP.SignumID= @signum
			 and UP.SubActivityID= @subactivityID
			 and UP.WFID= @wfID
			 and UP.ProjectID=@projectID
			order by UP.SystemID DESC)
		BEGIN 
			select top(1)  @proficiencyName= PT.ProficiencyName	from TRANSACTIONALDATA.TBL_WORK_FLOW_USER_PROFICIENCY UP
						join refData.TBL_WF_Proficiency_Type PT on UP.DisplayedMode=PT.ProficiencyID
						where UP.SignumID= @signum
						 and UP.SubActivityID= @subactivityID
						 and UP.WFID= @wfID
						 and UP.ProjectID=@projectID
						order by UP.SystemID DESC

				if @proficiencyName=@proficiencyAssessed and @kpiValue=0
				BEGIN 
					select
					@wfName WorkFlowName ,
					 @multiView multiMode,
					@wfID WFID,
					 PT.ProficiencyID DisplayedMode,
					 PT.ProficiencyName,
					 PT.ProficiencyLevel
					 ,@kpiValue kpiValue
					 from refData.TBL_WF_Proficiency_Type PT 
					 where ProficiencyName=@proficiencyExperienced
				END
				ELSE
				BEGIN
						select top(1) WorkFlowName,
						 WFID, 
						 DisplayedMode,
						 ProficiencyName,
						 ProficiencyLevel
						 ,@multiView multiMode
						 ,@kpiValue kpiValue
						 from (
						 SELECT *,
							ROW_NUMBER() OVER(PARTITION BY PROJECTID,WFID,SUBACTIVITYID,signumid ORDER BY LastModifiedOn DESC)RN
							FROM TRANSACTIONALDATA.TBL_WORK_FLOW_USER_PROFICIENCY
							WHERE
							 SignumID= @signum
							 and SubActivityID= @subactivityID
							 and WFID= @wfID
							 and ProjectID=@projectID) tbl
						 join refData.TBL_WF_Proficiency_Type PT on DisplayedMode=PT.ProficiencyID where rn=1
				END
		END 
		ELSE if @kpiValue= 0
		BEGIN 
			select
			@wfName WorkFlowName ,
			 @multiView multiMode,
			@wfID WFID,
			 PT.ProficiencyID DisplayedMode,
			 PT.ProficiencyName,
			 PT.ProficiencyLevel
			 ,@kpiValue kpiValue
			 from refData.TBL_WF_Proficiency_Type PT 
			 where ProficiencyName=@proficiencyExperienced
		END
		ELSE 
		BEGIN 
			select
			@wfName WorkFlowName ,
			 @multiView multiMode,
			@wfID WFID,
			 PT.ProficiencyID DisplayedMode,
			 PT.ProficiencyName,
			 PT.ProficiencyLevel
			 ,@kpiValue kpiValue
			 from refData.TBL_WF_Proficiency_Type PT 
			 where ProficiencyName=@proficiencyAssessed
		END
	END
	ELSE
	BEGIN
		select
		@wfName WorkFlowName ,
		@multiView multiMode,
		@wfID WFID,
		 PT.ProficiencyID DisplayedMode,
		 PT.ProficiencyName,
		 PT.ProficiencyLevel
		 ,@kpiValue kpiValue 
		 from refData.TBL_WF_Proficiency_Type PT 
		 where ProficiencyName=@proficiencyAssessed
	END 
	</select>
    
	<select id='saveWFUserProficiency' statementType="CALLABLE" resultType="com.ericsson.isf.model.SaveWfUserProfResponseModel">
  		{call USP_CALC_TBL_WORK_FLOW_USER_PROFICIENCY(
        #{signumID, jdbcType=VARCHAR},
        #{subActivityId,jdbcType=INTEGER},
        #{wfID,jdbcType=INTEGER},
        #{workFlowUserProficiencyModel.projectID,jdbcType=INTEGER},
        #{workFlowUserProficiencyModel.proficiencyMeasurement, jdbcType=VARCHAR},
        #{workFlowUserProficiencyModel.createdBy, jdbcType=VARCHAR},
        #{woID, jdbcType=INTEGER}
        )};
  	</select>
	<select id='checkIFProficiencyIDExists' resultType="Boolean">
		IF Exists(SELECT 1
		FROM refData.tbl_WF_Proficiency_Type where ProficiencyID =
		#{proficiencyID} and
		IsActive=1)
		Begin
		Select 1 as 'Result'
		End
		else
		Begin
		Select 0 as 'Result'
		End
	</select>
	
	<select id="getDisabledStepDetails" resultType="com.ericsson.isf.model.StepDetailsModel">
		select top 1 FSD.SubActivityFlowChartDefID as flowChartDefID,FSD.StepID AS flowChartStepId,FSD.TaskID,
		FSD.ExecutionType,FSD.StepName, FSD.StepType, BOOK.BookingID, BOOK.Status from transactionalData.TBL_FLOWCHART_STEP_DETAILS FSD
		left join transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS BOOK 
		on FSD.SubActivityFlowChartDefID=BOOK.FlowchartdefID and FSD.StepID=BOOK.FlowChartStepID 
		and FSD.TaskID=BOOK.TaskID and FSD.ExecutionType=BOOK.ExecutionType and BOOK.WOID=#{wOID}
		where FSD.SubActivityFlowChartDefID=#{subActivityDefID} and FSD.TaskID=0 and FSD.ExecutionType='ManualDisabled' and FSD.Active=1
		order by BOOK.SystemID desc
	</select>
	
	
	<select id='getDescisionStepDetails' resultMap='ChildStepDetailsModelResult'>
		SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
		DROP TABLE IF EXISTS #tempStepData
		declare @WOProfLevel TINYINT
		declare @stepID varchar(512) = #{stepID}
		declare @defID int = #{defID}
		declare @woID int = #{woID}
		declare @dummyStepId varchar(512)
		declare @dummyStepName varchar(512)
		declare @dummyStepExecType varchar(100)

		Select @dummyStepId = StepID, @dummyStepName= StepName , @dummyStepExecType=ExecutionType  from transactionalData.TBL_FLOWCHART_STEP_DETAILS 
		 where SubActivityFlowChartDefID=@defID and ExecutionType= 'ManualDisabled'
		
		Select @WOProfLevel = ProficiencyLevel from refData.tbl_WF_Proficiency_Type
		where ProficiencyID = (select ProficiencyID from transactionalData.TBL_WORK_ORDER where WOID=@woID)
		
		select distinct
		CASE
			WHEN @WOProfLevel > profType.ProficiencyLevel and FS.ExecutionType='Manual' THEN @dummyStepId
			ELSE CAST(FL.FlowchartTargetID as varchar(50))
		END
		 as stepID,
		<!-- CASE
			WHEN @WOProfLevel > profType.ProficiencyLevel and FS.ExecutionType='Manual' THEN  CONCAT( FS.StepName,'(',@dummyStepName, ')')
			ELSE  -->
		<!-- END -->
		 FS.StepName as stepName,
		CASE
		WHEN @WOProfLevel > profType.ProficiencyLevel and FS.ExecutionType='Manual' THEN 0
		ELSE FS.TaskID
		END
		 as taskID,
		CASE
		WHEN @WOProfLevel > profType.ProficiencyLevel and FS.ExecutionType='Manual' THEN @dummyStepExecType
		ELSE FS.ExecutionType
		END
		 as executionType,
		FS.RpaID as StepRpaId
		,sfd.LabelText as labelName
		,stepType =
		CASE
		WHEN @WOProfLevel > profType.ProficiencyLevel and FS.ExecutionType='Manual' THEN 'ericsson.ManualDisabled'
		ELSE FS.StepType
		END
		,rpa.isRunOnServer
		,rpa.isInputRequired
		,rpa.BOTLanguage as botType
		,wfsasr.taskActionName
		,profType.ProficiencyID
		,profType.ProficiencyName
		,profType.ProficiencyLevel
		,isnull(WOFSD.BookingID,0) as bookingID
		,isnull(WOFSD.Status,'NA') as bookingStatus
		,Fs.outputUpload
		,case when taskActionName = 'STOP' then 1 else 0 end stopRule
		,case when taskActionName = 'START' then 1 else 0 end startRule
		into #tempStepData
		from transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_LINK_DETAILS FL
		Inner Join transactionalData.TBL_FLOWCHART_STEP_DETAILS FS on FS.StepID = FL.FlowchartTargetID and FS.SubActivityFlowChartDefID = FL.SubActivityFlowChartDefID
		INNER join (
		            select cells.*,SubActivityFlowChartDefID from
		            transactionalData.TBL_SUBACTIVITY_FLOWCHART_DEF
		            CROSS APPLY OPENJSON(FlowChartJSON)
		            WITH(
		                cells nvarchar(max) as json
		                )as FlowChart
		            CROSS APPLY OPENJSON (FlowChart.cells) 
		            WITH(
		                SourceID NVARCHAR(600) '$.source.id',
		                TargetID NVARCHAR(600) '$.target.id',
		                LabelText NVARCHAR(400) '$.labels[0].attrs.text.text'
		                )as cells
		            
		) as sfd on FL.SubActivityFlowChartDefID= SFD.SubActivityFlowChartDefID and sfd.SourceID=FL.FlowchartSourceID
		and sfd.TargetID = FL.FlowchartTargetID
		Left Join transactionalData.TBL_RPA_DeployedBOT rpa on rpa.BOTID = FS.RpaID
		left join transactionalData.TBL_WorkflowStepAutoSenseRule wfsasr
		on wfsasr.FCStepDetailsID=FS.FCStepDetailsID and wfsasr.SubactivityFlowchartDefID=FS.SubActivityFlowChartDefID
		left join refData.tbl_WF_Proficiency_Type profType on profType.ProficiencyID = FS.ProficiencyID
		Left Join transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS WOFSD on FL.FlowchartSourceID= WOFSD.FlowChartStepID and FL.SubActivityFlowChartDefID = WOFSD.FlowChartDefID
		where FL.SubActivityFlowChartDefID =@defID and FL.FlowchartSourceID = @stepID and FS.Active=1
		and sfd.LabelText is not null 
		
		SELECT stepid, 
		       stepname, 
		       taskid, 
		       executiontype, 
		       steprpaid, 
		       labelname, 
		       steptype, 
		       isrunonserver, 
		       isinputrequired, 
		       bottype, 
		       proficiencyid, 
		       proficiencyname, 
		       proficiencylevel, 
		       bookingid, 
		       bookingstatus, 
		       Max(stoprule)  stopRule, 
		       Max(startrule) startRule
		       ,outputUpload 
		FROM   #tempstepdata 
		GROUP  BY stepid, 
		          stepname, 
		          taskid, 
		          executiontype, 
		          steprpaid, 
		          labelname, 
		          steptype, 
		          isrunonserver, 
		          isinputrequired, 
		          bottype, 
		          proficiencyid, 
		          proficiencyname, 
		          proficiencylevel, 
		          bookingid, 
		          bookingstatus,
		          outputUpload 
	</select>
	
	 <select id ='getAllStepsByWOID' resultType="com.ericsson.isf.model.WorkflowStepDetailModel">
	select
    sd.ProficiencyID as proficiencyID,
    sd.task, sd.stepName , sd.stepId , sd.ExecutionType from transactionalData.TBL_FLOWCHART_STEP_DETAILS sd
    Inner Join
    transactionalData.TBL_WORK_ORDER wo  on
    sd.SubActivityFlowChartDefID =  wo.flowchartdefid  AND taskID !=0   
    where wo.woID = #{woID}
    order by StepID
		</select> 
	
	 <select id ='getAllNextStepID' resultType="com.ericsson.isf.model.NextStepModel">
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
		
		declare @stepID varchar(512) = #{stepID}
		declare @defID int = #{defID}
		
		select distinct
			CAST(FL.FlowchartTargetID as varchar(50)) as NextStepID,
			FS.StepName as NextStepName,
			FS.StepType as NextStepType
		from transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_LINK_DETAILS FL 
		Inner Join transactionalData.TBL_FLOWCHART_STEP_DETAILS FS on FS.StepID = FL.FlowchartTargetID and FS.SubActivityFlowChartDefID = FL.SubActivityFlowChartDefID
		where FL.SubActivityFlowChartDefID =@defID and FL.FlowchartSourceID = @stepID and FS.Active=1
		</select> 
		
		<select id ='getKpiValue' resultType="Integer">
		IF Exists(select KPIValue
			from transactionaldata.TBL_SubactivityFlowChart_Kpi_Value
			where projectid= #{projectID}
				 and SubActivityID= #{subactivityID} and wfid = #{wfID} and KpiID= (select KpiID from REFDATA.TBL_WF_PROFICIENCY_KPI where KpiName = #{qualifyCount})
				 and IsActive=1
		 )
		Begin
				Select  KPIValue as 'Result'  from (
				select kpiid,KPIValue,ProjectID,wfid,SubactivityID,--createddate,
				ROW_NUMBER() over(partition by kpiid,ProjectID,wfid,SubactivityID order by modifiedDate desc)rn
				from transactionaldata.TBL_SubactivityFlowChart_Kpi_Value
				where    projectid= #{projectID}
				 and SubActivityID= #{subactivityID} and wfid = #{wfID} and KpiID= (select KpiID from REFDATA.TBL_WF_PROFICIENCY_KPI where KpiName = #{qualifyCount})
				 and IsActive=1
				)tbl where rn=1   
		End
		else
		Begin
				Select KpiDefaultValue as 'Result' from REFDATA.TBL_WF_PROFICIENCY_KPI where KpiName = #{qualifyCount}
		
		End  
	
		</select> 
		
		<select id="getProficiencyDetailsByName" resultType="com.ericsson.isf.model.ProficiencyTypeModal">
		select ProficiencyID,
		 	ProficiencyLevel,
		 	ProficiencyName
		 from refData.tbl_WF_Proficiency_Type  
		 where ProficiencyName=#{proficiencyName}
		</select>

		<select id="getWfNameByWfId" resultType="String">
		select  distinct WorkFlowName
		from transactionalData.TBL_SUBACTIVITY_FLOWCHART_DEF
		where WFID=#{wfID} and ProjectID= #{projectID} and SubActivityID=#{subactivityID} and SubActivityFlowChartDefID= #{defID}
		</select>
		
		<select id="getProficiencyNameWoID" resultType="String">
		Select Prof.proficiencyName from
			transactionalData.TBL_WORK_ORDER WO
			Left Join refData.tbl_WF_Proficiency_Type Prof
			on WO.ProficiencyID = Prof.ProficiencyID
		Where WO.WOID = #{wOID}
		</select>
		
		<select id='checkIFPreviousStepCompletedQualifiedWo' statementType="CALLABLE"  resultType="Boolean">
        {call usp_PreviousIsCompletedStepWithProficiency(
        #{defID,jdbcType=INTEGER},
        #{stepID, jdbcType=VARCHAR},
        #{wOID,jdbcType=INTEGER})};
    </select>
    
    <select id="getSubActivityDefIDForWOID" resultType="Integer">
		Select flowchartdefid
		 from transactionalData.TBL_WORK_ORDER WITH (NOLOCK)  
		 Where WOID = #{woID}
		</select>
		
		<select id="getCurrentStepDetails" resultType="com.ericsson.isf.model.StepTaskModel">
			select top (1) StepID,StepName from  transactionalData.TBL_FLOWCHART_STEP_DETAILS  where StepID=#{stepID}
			and SubActivityFlowChartDefID= #{defID}
		</select>
		
		<select id="getLastStepID" resultType="String">
			select top 1 StepID from transactionalData.TBL_FLOWCHART_STEP_DETAILS
			where StepID
			NOT IN(select FlowchartSourceID from transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_LINK_DETAILS
			where SubActivityFlowChartDefID=#{subactivityDefID})
			and ExecutionType!='ManualDisabled' and SubActivityFlowChartDefID=#{subactivityDefID}			
		</select>
		
		<select id="getProficiencyId" resultType="Integer">
		declare
	    @signum varchar(10),
		@woid int 
        DECLARE 
        @Assessedproficiencyid TINYINT, 
        @ExperiencedProficiencyid TINYINT,
        @ProficiencyName       VARCHAR(15) ,
        @ExpProficiencyName  VARCHAR(15) ,
        @KPI_ID int
        
        select TOP 1 @KPI_ID=KpiID from REFDATA.TBL_WF_PROFICIENCY_KPI where KpiName ='Qualify Count'
            
            SELECT @Assessedproficiencyid = proficiencyid, 
            @ProficiencyName = proficiencyname 
            FROM   refdata.tbl_wf_proficiency_type 
            WHERE  proficiencyname = 'Assessed' 
            SELECT @ExperiencedProficiencyid = proficiencyid, 
            @ExpProficiencyName = proficiencyname 
            FROM   refdata.tbl_wf_proficiency_type 
            WHERE  proficiencyname = 'Experienced'


                                select   
                                CASE 
                                 WHEN t1.status IN ( 'ASSIGNED', 'PLANNED', 'REOPENED' ) AND Isnull(tt.kpivalue, -1) = 0 THEN @ExperiencedProficiencyid
                                 WHEN t1.Status NOT IN ( 'ASSIGNED', 'PLANNED', 'REOPENED' ) AND Isnull(tt.kpivalue, -1) = 0 THEN Isnull(t1.proficiencyid, @ExperiencedProficiencyid)
                                      WHEN t1.status IN ( 'ASSIGNED', 'PLANNED', 'REOPENED' ) AND Isnull(tt.kpivalue, -1) != 0 THEN @Assessedproficiencyid
                                 ELSE ISNULL(t1.proficiencyid, @Assessedproficiencyid) 
                                 END 
                                     ProficiencyID 
                    from transactionalData.TBL_WORK_ORDER t1 join
                   transactionalData.TBL_WORK_ORDER_PLAN as t2 on t1.WOPlanID=t2.WOPlanID
                    join
                    transactionalData.TBL_PROJECTS as t3 on t2.ProjectID=t3.ProjectID
                     inner join transactionalData.TBL_SUBACTIVITY_FLOWCHART_DEF t4
                                                           ON t4.subactivityflowchartdefId=t1.flowchartdefId and t4.projectid = t1.projectid
                                                            AND t4.subactivityid = t1.subactivityid
                                    left join refdata.tbl_wf_proficiency_type twpt
                                           on twpt.ProficiencyID=t1.ProficiencyID
                                
                    LEFT JOIN(
                                       Select projectid,wfid,KPIValue,SubActivityID 
                                              from( select projectid,wfid,KPIValue,SubActivityID,
                                              ROW_NUMBER() over(partition by kpiid,ProjectID,wfid,SubactivityID order by modifiedDate desc)rn
                                       from transactionaldata.TBL_SubactivityFlowChart_Kpi_Value
                                       where KpiID=@KPI_ID and IsActive=1 )kk
                                       WHERE kk.rn=1
                                        ) tt  on tt.projectid=t3.projectid and tt.SubactivityID=t1.SubActivityID AND  tt.WFID=t4.WFID where
                    <if test="signum != null and signum!=''">
		                  t1.signumID=#{signum}  and
		            </if>
                         t1.woid=#{wOID}
		</select>
		
		<select id="getAllWorkOrderStepsForTraversal" resultMap='FlowChartReverseTraversalResult'>
			select stepDet.StepID, link.FlowchartSourceID, Book.Status, stepDet.ProficiencyID, stepDet.ExecutionType
			from transactionalData.TBL_FLOWCHART_STEP_DETAILS stepDet
			left join transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_LINK_DETAILS link 
			on stepDet.StepID=link.FlowchartTargetID and stepDet.SubActivityFlowChartDefID=link.SubActivityFlowChartDefID
			left join
			(	select WOID,FlowChartDefID,FlowChartStepID,Status,ROW_NUMBER() OVER(PARTITION BY WOID,FlowChartDefID,FlowChartStepID ORDER BY BookedOn DESC) as rn from 
				transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS where WOID=#{wOID}
			)book 
			on stepDet.StepID= book.FlowChartStepID and stepDet.SubActivityFlowChartDefID=book.FlowChartDefID
			and book.rn=1
			where stepDet.SubActivityFlowChartDefID=#{subactivityDefID}
		</select>
		
	<update id='updateBookingStatusOnStart'>
		UPDATE
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS
		SET Status= #{status},
		EndDate=convert(varchar(25), dbo.GetDateIST(),
		120),SignumID=#{signumID},Reason = #{comment},
		Hours = DATEDIFF(ss,
		StartDate, dbo.GetDateIST())/3600.0,
		ModifiedBy = #{signumID},
        ModifiedDate = dbo.GetDateIST() 
		Where WOID = #{woID} AND BookingID
		=#{bookingID} and Status = 'ONHOLD'
	</update>
		
	<select id='maxDisabledOnHoldBookingID'
		resultMap="WorkFlowBookingDetailsModelResult">
		Select WOID, FlowChartStepID as stepID,TaskID,BookingID,Status, Reason
		from
		(
		Select
		row_number() Over(Partition by woid,TaskID Order by bookingID desc) as rnum,
		woid,TaskID,FlowChartStepID,BookingID,Status, bd.reason
		From
		transactionalData.TBL_WORK_ORDER_BOOKING_DETAILS bd
		where bd.Type !='LEADTIME' and bd.Type ='BOOKING'
		and bd.Status = 'ONHOLD'
		and WOID= #{woID} and taskID =#{taskID}
		) t
		Where rnum = 1

	</select>
	<select id='checkIFManualDisabledStep'	resultType="Boolean">
		IF exists(
			select 1 from transactionalData.TBL_FLOWCHART_STEP_DETAILS 
			where SubActivityFlowChartDefID= #{defID} and StepID= #{stepID} and ExecutionType='ManualDisabled'
		)
		Begin 
			select 1 as Result
		END
		Else
		Begin 
		select 0 as Result
		END
	</select>
	<select id="checkIFPreviousStepCompletedDisabled" resultType="Boolean" >
	
	drop table IF EXISTS #tempPrevDis;
	declare @status varchar(50)

	select top 1 @status= status from transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS where WOID=#{woID} 
	and ExecutionType !='ManualDisabled' and BookingID!=0
	order by systemID desc

	IF (@status != 'STARTED')
    BEGIN
        declare @woProf tinyint ;
        declare @ExpProfID tinyint;

        select @woProf= ProficiencyID from transactionalData.TBL_WORK_ORDER where WOID=#{woID}
		Select @ExpProfID = ProficiencyID from refData.tbl_WF_Proficiency_Type
	    where ProficiencyName = 'Experienced' and IsActive = 1;
        
 
        select FSD.ProficiencyID, FSD.StepType, FSD.StepID into #tempPrevDis
         from 
		 (select top 1 FlowChartStepID ,FlowchartdefID 
		 from 	transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS
			where WOID=#{woID} and Status in ('COMPLETED', 'SKIPPED') and FlowchartdefID=#{defID} and ExecutionType !='ManualDisabled' 
			order by ModifiedDate desc
		 ) as WFD 
         join transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_LINK_DETAILS WFSLD on WFSLD.FlowchartSourceID=WFD.FlowChartStepID and WFD.FlowchartdefID= WFSLD.SubActivityFlowChartDefID
         join transactionalData.TBL_FLOWCHART_STEP_DETAILS FSD on WFSLD.FlowchartTargetID= FSD.StepID and FSD.SubActivityFlowChartDefID= WFSLD.SubActivityFlowChartDefID

		IF EXISTS(select top 1 StepID from #tempPrevDis where StepType ='ericsson.EndStep' OR  ISNULL(ProficiencyID,@ExpProfID) &lt; @woProf)
		BEGIN
			select 1 as Result
		END
		ELSE
		BEGIN
			select 0 as Result
		END

    END
    ELSE
    BEGIN
       IF EXISTS(select 1 from transactionalData.TBL_WORK_ORDER_FLOWCHART_STEP_DETAILS where WOID=#{woID}  
       and ExecutionType !='ManualDisabled' and BookingID!=0)
		BEGIN
			select 0 as Result
		END
		ELSE
		BEGIN
			select 1 as Result
		END
    END
		
	</select>
	
	<select id='getExecutionTypeNew' resultType='String'>
		select ExecutionType from transactionalData.TBL_FLOWCHART_STEP_DETAILS WITH (NOLOCK) where SubActivityFlowChartDefID = #{defID}
		and StepID = #{stepid} and Active = 1
	</select>
	<select id="downloadWorkHistoryData" resultType="java.util.LinkedHashMap">
				declare @DefProdID TINYINT ,@KPIID TINYINT,@ExpProfID TINYINT, @Signumid varchar(10)
				Drop  table  IF Exists  #tbl_work_flow_user_proficiency 
				
				select * into #tbl_work_flow_user_proficiency
				from (SELECT *,
				ROW_NUMBER() OVER(PARTITION BY PROJECTID,WFID,SUBACTIVITYID,signumid ORDER BY LastModifiedOn DESC)RN
				FROM TRANSACTIONALDATA.TBL_WORK_FLOW_USER_PROFICIENCY
				WHERE  
				signumid IN (${signum})) tbl where rn=1
				
				Select @DefProdID = ProficiencyID from refData.tbl_WF_Proficiency_Type
				where ProficiencyName = 'Assessed'
				;
				select @KPIID = KpiID from REFDATA.TBL_WF_PROFICIENCY_KPI where KpiName = 'Qualify Count'
				and IsActive=1
				; 
				Select @ExpProfID = ProficiencyID from refData.tbl_WF_Proficiency_Type
			    where ProficiencyName = 'Experienced' and IsActive = 1  
				;
				
		        
				 Drop table if exists #tempdata
				
				select Distinct wp.projectid,wo.WOID, wo.WOName, wo.Priority,wo.Status
		        ,s.Activity,s.SubActivity,s.subActivityId,def.Type,
		        CASE WHEN wo.ProficiencyID IS NOT NULL then wo.ProficiencyID
				WHEN WFProf.DisplayedMode &lt;&gt; @DefProdID  then WFProf.DisplayedMode
				WHEN ((WFProf.DisplayedMode is null) or (WFProf.DisplayedMode =@DefProdID )) 
				and  KV.KPIValue = 0
				then @ExpProfID ELSE @DefProdID END as ProficiencyID ,
			    
			    case when nodes.NodeType is
		        null or len(nodes.NodeType) &lt; 2 then
		        ne.ElementType else
		        nodes.NodeType end NodeType,
		        wo.woPlanId
		        ,nodes.NodeNames,convert(nvarchar(MAX), wo.actualstartdate, 21)  startdate,
		        convert(nvarchar(MAX),  wo.actualenddate, 21)  endDate,
		       def.versionNumber
		        ,wo.DOID,ne.Market
		       into #tempdata
		        from
		        transactionalData.TBL_WORK_ORDER wo
		        inner join
		        transactionalData.TBL_WORK_ORDER_PLAN wp on
		        wp.WOPlanID=wo.WOPlanID
		        left join transactionalData.TBL_WORK_ORDER_NODES as nodes on
		        nodes.WOID =
		        wo.WOID
		        left join transactionalData.TBL_NETWORK_ELEMENT ne
		        on
		        ne.Name=nodes.NodeNames and ne.ProjectID=wo.PROJECTID
		        inner join
		        refData.TBL_SUBACTIVITY s on wo.SubActivityID = s.SubActivityID
		        inner
		        join transactionalData.TBL_SUBACTIVITY_FLOWCHART_DEF def on
		        def.ProjectID = wp.ProjectID
		        and def.SubActivityID = wo.SubActivityID
		        and
		        wo.WorkFlowVersion=def.versionnumber
		        and def.SubActivityFlowChartDefID=wo.flowchartdefid
		        inner join
		        transactionalData.TBL_PROJECTS proj on wp.ProjectID=proj.ProjectID
		        LEFT join #tbl_work_flow_user_proficiency  WFProf
				   ON WO.ProjectID = WFProf.ProjectID 
				   AND WO.signumID = WFProf.SignumID
				   And def.WFID =  WFProf.WFID
				   AND wo.SubActivityID = WFProf.SubActivityID
				   Left Join transactionaldata.TBL_SubactivityFlowChart_Kpi_Value KV
				   On KV.ProjectID = wo.PROJECTID
				   and KV.SubActivityFlowChartDefID = wo.flowchartdefid
				   and KV.SubactivityID = wo.SubActivityID
				   and KV.IsActive =  1
				   and KV.KpiID = @KPIID
				
				
		        
		        where wp.active=1 and wo.active=1
		
		        <if test='signum != null'>
		            and wo.SignumID in (${signum})
		            and proj.Status != 'Closed'
		        </if>
		        <if test='startDate != null and endDate != null'>
		            and
		            (
		            (wo.status in ('CLOSED','COMPLETED','REJECTED') and
		            CONVERT(DATE,
		            wo.ActualEndDate) between
		            #{startDate} and #{endDate})
		
		            or
		            (
		            wo.status in ('DEFERRED') and CONVERT(DATE, wo.LastModifiedDate)
		            between
		            #{startDate} and #{endDate}
		            )
		            )
		        </if>
		        
				Select
				projectid as [Project ID],
				Nodes = STUFF((SELECT ', ' + NodeNames
          	 	FROM #tempdata b 
           		WHERE b.woid = a.woid 
          		FOR XML PATH('')), 1, 2, ''),
				'' [Deliverable Name] , '' [Deliverable Unit] ,
				
				DOID,WOID as [WO ID],WOName as [WO Name],Priority,Status,
				startdate as [Start Date], endDate as [End Date],Activity,SubActivity
				FROM #tempdata a
				GROUP BY projectid,WOID,WOName,Priority,Status,Activity,SubActivity,subActivityId,Type,ProficiencyID,woPlanId,startdate,endDate,versionNumber,       
				DOID
		  
		   
	</select>
	
	<select id='getListOfNode'
				resultMap='WorkOrderNodesModelResult'>
				
	            select Distinct ISNULL(ne.Market,'') as Market ,
                case when nodes.NodeType is
		        null or len(nodes.NodeType) &lt; 2 then
		        ISNULL(ne.ElementType,'') else
		        ISNULL(nodes.NodeType,'') end NodeType,
                ISNULL(nodes.NodeNames,'') as NodeNames
                
		        from
		        transactionalData.TBL_WORK_ORDER wo
		        left join transactionalData.TBL_WORK_ORDER_NODES as nodes on
		        nodes.WOID =
		        wo.WOID
		        left join transactionalData.TBL_NETWORK_ELEMENT ne
		        on
		        <!-- ne.Name=nodes.NodeNames and ne.ProjectID=wo.PROJECTID	 -->
		        ne.NetworkElementID=nodes.NetworkElementID				        
		        where wo.woid=#{wOID}		
				
	</select>			
	<select id='isVersionMatched' resultType="Boolean">
			declare @installedVersion varchar(10),@deployedVersion varchar(10)
			IF Exists(select    1 from
        	transactionalData.TBL_ISFDesktopVersionUserWise
        	where SignumID= #{signum})
		Begin
		select    top 1   @installedVersion=  version  from
        	transactionalData.TBL_ISFDesktopVersionUserWise
        	where SignumID= #{signum} order by UpdatedOn desc
			select top 1 @deployedVersion= Version  
        	from refData.TBL_ISFDesktopUpdates where Active=1 and updateType='APP'
			SELECT
    		CASE WHEN @installedVersion=@deployedVersion  THEN '0' ELSE '1' END AS MyDesiredResult
		End
		ELse 
		BEGIN
		select 0 as MyDesiredResult
		END
	</select>
	
	
<select id='getLatestVersionNumber' resultType="String">
	select version from refData.TBL_ISFDesktopUpdates
		where Active = 1 AND UpdateType = 'App'
	</select>
	
	<select id='isInstalledLibraryVersionUpdated' resultType="boolean">
	SELECT CASE WHEN deployedVersion = (select
		top 1 LibraryVersion as
		installedVersion from
		transactionalData.TBL_ISFLibraryVersionUserWise
		where
		SignumID=#{signumID} order by UpdatedOn desc)
		THEN 1 else 0 END as
		result FROM (select top 1 Version as deployedVersion
		from
		refData.TBL_ISFDesktopUpdates where Active=1 and UpdateType='LibraryJar' )q
	</select>

	<insert id='insertWorkOrderNetworkElement'>
		Declare @signum varchar(20) = #{signum},
		@tableName varchar(50) = #{tablename} ,
		@WOID int = #{wOID},
		@sql varchar(max)


		set @sql = 'Insert into transactionalData.TBL_WORK_ORDER_Nodes (
		NodeType, NodeNames, CreatedBy, CreatedDate, LastModifiedBy,
		LastModifiedDate,
		active, networkelementid, woid)
		select ElementType, Name, '''+@signum+''', dbo.getdateIST(), '''+@signum+''',
		dbo.getdateIST(), 1, networkelementid,
		'+cast(@WOID as varchar)+' from '+@tableName+' where radioselection = 1'

		exec(@sql)
	</insert>
	
	<delete id='deleteExistingWorkOrderNECount'>
		DELETE FROM transactionalData.TBL_WorkOrder_NECount
		WHERE WOID=#{wOID}
	</delete>

	<insert id='insertWorkOrderNECount'>
		insert into transactionalData.TBL_WorkOrder_NECount
		(WOID,
		NeCount
		<if test="neTextName != null and neTextName != '' ">
			,NeCSV
		</if>
		,Active,
		CreatedBy,
		CreatedOn,
		ModifiedBy,
		ModifiedOn)
		Values(
		#{wOID},
		#{count}
		<if test="neTextName != null and neTextName != '' ">
			,#{neTextName}
		</if>
		,1,
		#{signum},
		dbo.getdateIST(),
		#{signum},
		dbo.getdateIST()
		)

	</insert>
	<select id='getCompleteWoDetails'
	resultMap="WorkOrderCompleteDetailsModelResult1">
		{call usp_getCompleteWorkOrderDetails(
	        #{wOID, jdbcType=INTEGER},
	        #{columnNames,jdbcType=VARCHAR})};
	 </select>
	<select id="getMarketsByWorkOrders" resultType='String' >
		select distinct ISNULL(Market,'') as Market from transactionalData.TBL_NETWORK_ELEMENT with (index(NCI_CCGID))
		 where CountryCustomergroupID=#{countryCustomerGroupId} and Name IN
		<foreach collection="workOrderColumnMappingModel.nodeNames" item="node" index="index" open="(" separator=","  close=")">
         #{node}
         </foreach>
	</select>

	<update id='updatetWorkOrderNECount'>
	UPDATE transactionalData.TBL_WorkOrder_NECount
	SET
	NeCount=#{count},
	<if test="neTextName != null and neTextName != '' ">
		NeCSV = #{neTextName},
	</if>
	<if test="neTextName == null or neTextName == '' ">
		NeCSV = null,
	</if>

	ModifiedBy=#{signum},
	ModifiedOn=dbo.GetDateIST()
	WHERE WOID=#{wOID}

</update>

	
	<select id='getAssignedToSignumByWOID' resultType="String">
	    select SignumID from transactionalData.TBL_WORK_ORDER where WOID=#{wOID}
	</select>
	
	<select id='validateWOStatus' resultType='Boolean'>
		        IF EXISTS (
		                    select 1 from [transactionalData].[TBL_WORK_ORDER]
					        where WOID =#{wOID} and Status in ('ASSIGNED','ONHOLD')
						  )
					BEGIN
					  select 1 as 'Result'
					END
				ELSE
					BEGIN
					 select 0 as 'Result'
					END 			 
	</select>
	
   <select id="downloadProjectQueueWorkOrders" resultType="java.util.LinkedHashMap">


	declare
	@SIGNUM VARCHAR(15) =#{signum},
	@STARTDATE DATE=#{startDate},
	@ENDDATE DATE=#{endDate},
	@STATUS VARCHAR(15)=#{status},
	@PRIORITY VARCHAR(15)=#{priority},
	@DOSTATUS VARCHAR(15)=#{doStatus},
	@ProjectIDList varchar(max)=#{projectIdList},
	@START INT =0,
    @LENGTH INT =#{length}

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;
 
	DROP TABLE IF EXISTS
	#PRJID, #WOAudit,#WO,#WO1

	select name
	PROJECTID into #PRJID from
	dbo.splitString(@ProjectIDList,',')

	Create
	Table #WO(PROJECTID int,
	WOID int, DOID int, WONAME
	varchar(500),
	PRIORITY varchar(20)
	,STATUS
	varchar(20),WOPlanID
	int,PLANNEDSTARTDATE
	Datetime,PLANNEDENDDATE
	Datetime,
	SIGNUMID
	varchar(10), SUBACTIVITYID
	int,WORKFLOWVERSION
	int,FLOWCHARTDEFID
	int,WFID INT
	, CREATEDBY
	varchar(50),
	IsAutoSenseEnable bit, SRID INT,
	NODETYPE
	varchar(100),NODENAMES
	varchar(100),
	market  VARCHAR(100),
    networkElementID int,
	PriorityLastModifiedOn DATETIME)

	declare @NEWENDDATE DATE
	=DATEADD(DD,1,@ENDDATE);

	IF(@DOSTATUS = 'ALL')
	Begin

	select WO.PROJECTID,
	WO.WOID, WO.DOID,
	WO.WONAME,
	WO.PRIORITY,WO.STATUS,WO.WOPlanID,CONVERT(Char(16),
	WO.PLANNEDSTARTDATE
	,20) PLANNEDSTARTDATE
	,WO.PLANNEDENDDATE,WO.SIGNUMID,
	WO.SUBACTIVITYID,WORKFLOWVERSION,FLOWCHARTDEFID,DEfID.WFID,WO.CREATEDBY
	,WO.IsAutoSenseEnable
	,SR.SRID ,N.NodeType,N.NodeNames, ne.market,ne.NetworkElementID, wo.PriorityLastModifiedOn
	INTO #WO1
	from
	transactionalData.TBL_WORK_ORDER WO
	inner join #PRJID PR on WO.PROJECTID
	= PR.ProjectID
	left join transactionalData.TBL_SUBACTIVITY_FLOWCHART_DEF
	defID
	On PR.ProjectID = defID.ProjectID
	and wo.flowchartdefid =
	DefID.SubActivityFlowChartDefID
	and wo.SubActivityID =
	defID.SubActivityID
	LEFT JOIN TRANSACTIONALDATA.TBL_WORK_ORDER_NODES N
	(NOLOCK)
	ON WO.WOID=N.WOID
	LEFT JOIN
	transactionalData.TBL_Service_Request SR
	ON WO.DOID = SR.DOID
	LEFT JOIN  transactionaldata.tbl_network_Element ne 
	 ON  ne.NetworkElementID=n.networkelementid
	Where
	WO.Priority=@PRIORITY and Wo.Active=1 and WO.Status=@STATUS and
	wo.SubActivityID is not null
	AND Convert(date, plannedstartdate) &gt;=@STARTDATE 
	AND Convert(date, plannedstartdate) &lt;=@NEWENDDATE


	insert
	into #WO select * from #WO1



	Create
	Clustered Index IX_WO on
	#WO(WOID,ProjectID,WOPLANID)
	Create Index
	IX_WO1 on
	#WO(SUBACTIVITYID,WORKFLOWVERSION,FLOWCHARTDEFID,SIGNUMID,IsAutoSenseEnable)
	Create Index IX_NODES on #WO(NODETYPE,NODENAMES,networkElementID)


	select distinct 
	WO.PROJECTID as [Project ID],P.PROJECTNAME as [Project Name],
	 Market = Isnull(STUFF((SELECT DISTINCT ', ' + Market
           FROM #wo1 WO1 
           WHERE WO1.woid = WO.woid  
          FOR XML PATH('')), 1, 2, ''),''),
	 [Network Element Name/ID]  = Isnull(STUFF ((SELECT DISTINCT ', ' + NodeNames
               FROM #wo1 WO1
               WHERE WO1.woid = WO.woid 
                FOR XML PATH('')), 1, 2, ''),''),
	 PS.SCOPENAME AS [Deliverable Name],
	 WO.DOID,isnull(convert(varchar(10),SR.SRID),'') [SRID],WO.WOID as [WO ID],WO.WONAME as [WO Name],DEF.WORKFLOWNAME as [WF NAME],
	WO.SIGNUMID [WO Assigned To],CASE WHEN EMP.EMPLOYEENAME IS
	NULL THEN '['+WO.CREATEDBY+']'
	ELSE
	EMP.EMPLOYEENAME+'['+WO.CREATEDBY+']' END AS [Created By],T.TECHNOLOGY as [Technology], 
	CONVERT(Char(16), WO.PLANNEDSTARTDATE ,20) [Start Date] ,
	CONVERT(Char(16), WO.PLANNEDENDDATE ,20) [End Date] ,

	wo.PriorityLastModifiedOn as [Priority Last Modified],S.SUBACTIVITY as SubActivity

	from #WO WO
	INNER JOIN
	TRANSACTIONALDATA.TBL_WORK_ORDER_PLAN WP (NOLOCK) ON WO.WOPLANID
	=
	WP.WOPLANID
	AND WP.PROJECTID = WO.PROJECTID
	INNER JOIN
	TRANSACTIONALDATA.TBL_PROJECTSCOPE PS (NOLOCK) ON WP.SCOPEID =
	PS.PROJECTSCOPEID
	LEFT JOIN REFDATA.TBL_PROJECT_DELIVERABLE_UNIT PDU
	(NOLOCK) ON
	PS.DELIVERABLEUNIT = PDU.DELIVERABLEUNITID
	INNER JOIN
	REFDATA.TBL_SUBACTIVITY S (NOLOCK) ON WO.SUBACTIVITYID =
	S.SUBACTIVITYID
	INNER JOIN
	TRANSACTIONALDATA.TBL_SUBACTIVITY_FLOWCHART_DEF DEF (NOLOCK) ON
	DEF.PROJECTID = WP.PROJECTID
	AND DEF.SUBACTIVITYID = WO.SUBACTIVITYID
	AND WO.WORKFLOWVERSION=DEF.VERSIONNUMBER
	AND
	WO.FLOWCHARTDEFID=DEF.SUBACTIVITYFLOWCHARTDEFID
	INNER JOIN
	TRANSACTIONALDATA.TBL_PROJECTS P (NOLOCK) ON WO.PROJECTID =
	P.PROJECTID
	LEFT JOIN REFDATA.TBL_EMPLOYEES EMP (NOLOCK) ON EMP.SIGNUM =
	WO.CREATEDBY
	INNER JOIN [REFDATA].[TBL_TECHNOLOGY] T (NOLOCK) ON
	S.TECHNOLOGYID =
	T.TECHNOLOGYID
	LEFT JOIN
	transactionalData.TBL_Service_Request SR
	ON WO.DOID = SR.DOID

    order by [Start Date] desc
    
     OFFSET @Start ROWS FETCH NEXT @Length  ROWS ONLY

	End

	Else IF(@DOSTATUS = 'INPROGRESS')
	Begin
	Drop table if exists #WOINPROGRESS
	Drop table if exists #wData
    Drop table if exists #WOAuditINPROGRESS
	select WO.PROJECTID, WO.WOID, WO.DOID, WO.WONAME,
	WO.PRIORITY,WO.STATUS,WO.WOPlanID,CONVERT(Char(16), WO.PLANNEDSTARTDATE
	,20) PLANNEDSTARTDATE,WO.PLANNEDENDDATE,
	WO.SIGNUMID,
	SUBACTIVITYID,WORKFLOWVERSION,FLOWCHARTDEFID,
	WO.CREATEDBY,
	nodenames,
	PriorityLastModifiedOn,
	ne.market,
	CASE
	WHEN nodetype IS NULL
	OR Len(nodetype) &lt; 2 THEN Isnull(ne.elementtype,'')
	ELSE Isnull(nodetype,'')
	END nodetype,
	wo.isautosenseenable
	INTO #WOINPROGRESS
	from transactionalData.TBL_WORK_ORDER WO
	inner join #PRJID PR on
	WO.PROJECTID = PR.ProjectID
	LEFT JOIN
	TRANSACTIONALDATA.TBL_WORK_ORDER_NODES N (NOLOCK) ON
	WO.WOID=N.WOID
	LEFT JOIN transactionaldata.tbl_network_Element ne
	 ON  ne.NetworkElementID=n.networkelementid
	Where WO.Priority=@PRIORITY and Wo.Active=1 and WO.Status=@STATUS
	AND Convert(date, plannedstartdate) &gt;=@STARTDATE
	AND Convert(date, plannedstartdate) &lt;=@ENDDATE


	Create
	Clustered Index IX_WO on
	#WOINPROGRESS(WOID,ProjectID,WOPLANID)
	Create
	Index IX_WO1 on
	#WOINPROGRESS(SUBACTIVITYID,WORKFLOWVERSION,FLOWCHARTDEFID,SIGNUMID,IsAutoSenseEnable)
	Create Index IX_NODES on #WOINPROGRESS(NODETYPE,NODENAMES)


	SELECT
	DISTINCT wo.DOID,wo.PROJECTID into #wData
	FROM
	TRANSACTIONALDATA.TBL_WORK_ORDER wo
	join #WOINPROGRESS WO1 on
	WO1.DOID=WO.DOID
	Join #PRJID P On wo.PROJECTID= p.ProjectID WHERE
	wo.STATUS NOT IN
	('ASSIGNED') AND WO.ACTIVE=1


	CREATE CLUSTERED INDEX
	CI_ALLwData ON #wData (DOID,PROJECTID)



	

	

	select distinct 
	WO.PROJECTID as [Project ID], P.PROJECTNAME as [Project Name],
	Market = Isnull(STUFF((SELECT DISTINCT ', ' + Market
           FROM #woinprogress WO1 
           WHERE WO1.woid = WO.woid  
          FOR XML PATH('')), 1, 2, ''),''),
				[Network Element Name/ID]  = Isnull(STUFF ((SELECT DISTINCT ', ' + NodeNames
               FROM #woinprogress WO1
               WHERE WO1.woid = WO.woid 
                FOR XML PATH('')), 1, 2, ''),''),
	PS.SCOPENAME AS [Deliverable Name],
	WO.DOID,isnull(convert(varchar(10),SR.SRID),'') [SRID],WO.WOID as [WO ID],WO.WONAME as [WO Name],DEF.WORKFLOWNAME as [WF NAME],
	WO.SIGNUMID [WO Assigned To],CASE WHEN EMP.EMPLOYEENAME IS
	NULL THEN '['+WO.CREATEDBY+']'
	ELSE
	EMP.EMPLOYEENAME+'['+WO.CREATEDBY+']' END AS [Created By],T.TECHNOLOGY as [Technology],
	CONVERT(Char(16), WO.PLANNEDSTARTDATE ,20) [Start Date] ,S.SUBACTIVITY as SubActivity,
	CONVERT(Char(16), WO.PlannedEndDate ,20) [End Date],wo.PriorityLastModifiedOn as [Priority Last Modified]
	
	from #WOINPROGRESS WO
	INNER JOIN
	TRANSACTIONALDATA.TBL_WORK_ORDER_PLAN WP (NOLOCK) ON WO.WOPLANID
	=
	WP.WOPLANID
	AND WP.PROJECTID = WO.PROJECTID
	INNER JOIN
	TRANSACTIONALDATA.TBL_PROJECTSCOPE PS (NOLOCK) ON WP.SCOPEID =
	PS.PROJECTSCOPEID
	LEFT JOIN REFDATA.TBL_PROJECT_DELIVERABLE_UNIT PDU
	(NOLOCK) ON
	PS.DELIVERABLEUNIT = PDU.DELIVERABLEUNITID
	INNER JOIN
	REFDATA.TBL_SUBACTIVITY S (NOLOCK) ON WO.SUBACTIVITYID =
	S.SUBACTIVITYID
	INNER JOIN
	TRANSACTIONALDATA.TBL_SUBACTIVITY_FLOWCHART_DEF DEF (NOLOCK) ON
	DEF.PROJECTID = WP.PROJECTID
	AND DEF.SUBACTIVITYID = WO.SUBACTIVITYID
	AND WO.WORKFLOWVERSION=DEF.VERSIONNUMBER
	AND
	WO.FLOWCHARTDEFID=DEF.SUBACTIVITYFLOWCHARTDEFID
	INNER JOIN
	TRANSACTIONALDATA.TBL_PROJECTS P (NOLOCK) ON WO.PROJECTID =
	P.PROJECTID
	LEFT JOIN REFDATA.TBL_EMPLOYEES EMP (NOLOCK) ON EMP.SIGNUM =
	WO.CREATEDBY
	INNER JOIN [REFDATA].[TBL_TECHNOLOGY] T (NOLOCK) ON
	S.TECHNOLOGYID =
	T.TECHNOLOGYID
	INNER JOIN #wData W
	ON W.DOID = WO.DOID AND W.PROJECTID=WO.PROJECTID
    LEFT JOIN transactionalData.TBL_Service_Request SR
    ON WO.DOID = SR.DOID
    
    order by [Start Date] desc
    
     OFFSET @Start ROWS FETCH NEXT @Length  ROWS ONLY

	ENd    


 
   </select>
   
    <select id='getSharepointUrl' resultType='String'>
       select url_link from refData.tbl_global_url_details where is_sharepoint_url=1 and url_status=1
	</select>
	
	<select id='getMarketAreaIDByProjectID' resultType='Integer'>
	select op.marketareaid from transactionalData.TBL_PROJECTS pr
    inner join transactionalData.TBL_OPPORTUNITY op on pr.OpportunityID=op.OpportunityID
    where ProjectID=#{projectID}
	</select>
	
    <select id='getDetailsByMarketID' resultType="com.ericsson.isf.model.SharePointDetailModel">
	    select BaseUrl,Sitename from [TransactionalData].[TBL_BotServerExecution_Sharepoint] 
	    where MarketAreaId=#{marketAreaID} and Active=1
	</select>
	
	<select id='validateSharePointDetailWithMarketArea' resultType='Boolean'>
		        IF EXISTS (
		                    select 1 from [TransactionalData].[TBL_BotServerExecution_Sharepoint]
					        where MarketAreaId=#{marketAreaID} and Active=1
						  )
					BEGIN
					  select 1 as 'Result'
					END
				ELSE
					BEGIN
					 select 0 as 'Result'
					END 			 
	 </select>
	 
	 <select id='getSharepointConfigurationDetails' resultType="com.ericsson.isf.model.SharePointDetailModel">
	    select b.MarketAreaId,BaseUrl,Sitename,clientID,m.MarketAreaName from [TransactionalData].[TBL_BotServerExecution_Sharepoint] b
        inner join refData.TBL_MARKETAREAS m on m.MarketAreaID=b.MarketAreaId
        where Active=1
	</select>

	<select id='getOutPutUploadByStepID' resultType='String'>
	select OutputUpload from transactionalData.TBL_FLOWCHART_STEP_DETAILS where
	StepID = #{stepID} and SubActivityFlowChartDefID = #{flowChartDefID}

</select>
	
</mapper>  