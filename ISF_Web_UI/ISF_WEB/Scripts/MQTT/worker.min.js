var window = self; let isDataReceived = !1; importScripts("paho.js"); let signumGlobal, topicName, apiResponse, UiRootDir, environment, browserInstances = [], counter = 0; var MQTT_KEY = "n4HTbJEmsR"; function initiateMqttOverWs() { let e = signumGlobal + "_" + environment + "_" + getBrowserType(); console.log(e); let n = new Paho.MQTT.Client(decrypt(apiResponse.hostNameMQTT), 443, "/ws/mqtt", e); n.onConnectionLost = function (e) { console.log(new Date), 0 !== e.errorCode && console.log(e.errorMessage) }, n.onMessageArrived = function (e) { console.log("onMessageArrived:" + e.payloadString), browserInstances.map(n => { n.postMessage(e.payloadString) }) }; var t = { useSSL: !0, userName: decrypt(apiResponse.userName), password: decrypt(apiResponse.password), onSuccess: function () { console.log("onConnect"); let e = { qos: 1 }; console.log(topicName), topicName ? n.subscribe(topicName, e) : console.log("Invalid topic, cannot subscribe. ") }, onFailure: function (e) { console.log(e) }, keepAliveInterval: 30, cleanSession: !1, reconnect: !0 }; n.connect(t) } function getBrowserType() { const { userAgent: e } = navigator; return e.includes("Firefox/") ? "Firefox" : e.includes("Edg/") ? "Edge" : e.includes("Chrome/") ? "Chrome" : e.includes("Safari/") ? "Safari" : void 0 } function getMQTTConnectionDetails() { var e = new XMLHttpRequest; e.onreadystatechange = function () { if (4 == this.readyState && 200 == this.status) { var e = this.responseText; apiResponse = JSON.parse(e), signumGlobal = apiResponse.signum } }, e.open("POST", UiRootDir + "/Data/getMqttDataDetails", !1), e.setRequestHeader("content-type", "application/json; charset=utf-8"), e.setRequestHeader("mqttToken", MQTT_KEY), e.send() } function decrypt(e) { let n = e.substring(4, e.length - 1), t = n.indexOf("*"), o = n.substring(0, t); return o = o.split("").reverse().join("") } onconnect = function (e) { const n = e.ports[0]; browserInstances.push(n), n.onmessage = function (e) { isDataReceived || (topicName = e.data[0], UiRootDir = e.data[1], environment = e.data[2], getMQTTConnectionDetails(), initiateMqttOverWs(), isDataReceived = !0) } };